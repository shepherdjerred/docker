// deno-lint-ignore-file

// generated by cdk8s
import {
  ApiObject,
  ApiObjectMetadata,
  GroupVersionKind,
} from "https://esm.sh/cdk8s@2.68.58";
import { Construct } from "https://esm.sh/constructs@10.3.0";

/**
 * ReplicationDestination defines the destination for a replicated volume
 *
 * @schema ReplicationDestination
 */
export class ReplicationDestination extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ReplicationDestination"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "volsync.backube/v1alpha1",
    kind: "ReplicationDestination",
  };

  /**
   * Renders a Kubernetes manifest for "ReplicationDestination".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ReplicationDestinationProps = {}): any {
    return {
      ...ReplicationDestination.GVK,
      ...toJson_ReplicationDestinationProps(props),
    };
  }

  /**
   * Defines a "ReplicationDestination" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: ReplicationDestinationProps = {},
  ) {
    super(scope, id, {
      ...ReplicationDestination.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ReplicationDestination.GVK,
      ...toJson_ReplicationDestinationProps(resolved),
    };
  }
}

/**
 * ReplicationDestination defines the destination for a replicated volume
 *
 * @schema ReplicationDestination
 */
export interface ReplicationDestinationProps {
  /**
   * @schema ReplicationDestination#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * spec is the desired state of the ReplicationDestination, including the replication method to use and its configuration.
   *
   * @schema ReplicationDestination#spec
   */
  readonly spec?: ReplicationDestinationSpec;
}

/**
 * Converts an object of type 'ReplicationDestinationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationProps(
  obj: ReplicationDestinationProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "metadata": obj.metadata,
    "spec": toJson_ReplicationDestinationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * spec is the desired state of the ReplicationDestination, including the replication method to use and its configuration.
 *
 * @schema ReplicationDestinationSpec
 */
export interface ReplicationDestinationSpec {
  /**
   * external defines the configuration when using an external replication provider.
   *
   * @schema ReplicationDestinationSpec#external
   */
  readonly external?: ReplicationDestinationSpecExternal;

  /**
   * paused can be used to temporarily stop replication. Defaults to "false".
   *
   * @default false".
   * @schema ReplicationDestinationSpec#paused
   */
  readonly paused?: boolean;

  /**
   * rclone defines the configuration when using Rclone-based replication.
   *
   * @schema ReplicationDestinationSpec#rclone
   */
  readonly rclone?: ReplicationDestinationSpecRclone;

  /**
   * restic defines the configuration when using Restic-based replication.
   *
   * @schema ReplicationDestinationSpec#restic
   */
  readonly restic?: ReplicationDestinationSpecRestic;

  /**
   * rsync defines the configuration when using Rsync-based replication.
   *
   * @schema ReplicationDestinationSpec#rsync
   */
  readonly rsync?: ReplicationDestinationSpecRsync;

  /**
   * rsyncTLS defines the configuration when using Rsync-based replication over TLS.
   *
   * @schema ReplicationDestinationSpec#rsyncTLS
   */
  readonly rsyncTls?: ReplicationDestinationSpecRsyncTls;

  /**
   * trigger determines if/when the destination should attempt to synchronize data with the source.
   *
   * @schema ReplicationDestinationSpec#trigger
   */
  readonly trigger?: ReplicationDestinationSpecTrigger;
}

/**
 * Converts an object of type 'ReplicationDestinationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpec(
  obj: ReplicationDestinationSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "external": toJson_ReplicationDestinationSpecExternal(obj.external),
    "paused": obj.paused,
    "rclone": toJson_ReplicationDestinationSpecRclone(obj.rclone),
    "restic": toJson_ReplicationDestinationSpecRestic(obj.restic),
    "rsync": toJson_ReplicationDestinationSpecRsync(obj.rsync),
    "rsyncTLS": toJson_ReplicationDestinationSpecRsyncTls(obj.rsyncTls),
    "trigger": toJson_ReplicationDestinationSpecTrigger(obj.trigger),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * external defines the configuration when using an external replication provider.
 *
 * @schema ReplicationDestinationSpecExternal
 */
export interface ReplicationDestinationSpecExternal {
  /**
   * parameters are provider-specific key/value configuration parameters. For more information, please see the documentation of the specific replication provider being used.
   *
   * @schema ReplicationDestinationSpecExternal#parameters
   */
  readonly parameters?: { [key: string]: string };

  /**
   * provider is the name of the external replication provider. The name should be of the form: domain.com/provider.
   *
   * @schema ReplicationDestinationSpecExternal#provider
   */
  readonly provider?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecExternal' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecExternal(
  obj: ReplicationDestinationSpecExternal | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "parameters": ((obj.parameters) === undefined)
      ? undefined
      : (Object.entries(obj.parameters).reduce(
        (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
        {},
      )),
    "provider": obj.provider,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * rclone defines the configuration when using Rclone-based replication.
 *
 * @schema ReplicationDestinationSpecRclone
 */
export interface ReplicationDestinationSpecRclone {
  /**
   * accessModes specifies the access modes for the destination volume.
   *
   * @schema ReplicationDestinationSpecRclone#accessModes
   */
  readonly accessModes?: string[];

  /**
   * capacity is the size of the destination volume to create.
   *
   * @schema ReplicationDestinationSpecRclone#capacity
   */
  readonly capacity?: ReplicationDestinationSpecRcloneCapacity;

  /**
   * copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
   *
   * @schema ReplicationDestinationSpecRclone#copyMethod
   */
  readonly copyMethod?: ReplicationDestinationSpecRcloneCopyMethod;

  /**
   * customCA is a custom CA that will be used to verify the remote
   *
   * @schema ReplicationDestinationSpecRclone#customCA
   */
  readonly customCa?: ReplicationDestinationSpecRcloneCustomCa;

  /**
   * destinationPVC is a PVC to use as the transfer destination instead of automatically provisioning one. Either this field or both capacity and accessModes must be specified.
   *
   * @schema ReplicationDestinationSpecRclone#destinationPVC
   */
  readonly destinationPvc?: string;

  /**
   * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
   *
   * @schema ReplicationDestinationSpecRclone#moverSecurityContext
   */
  readonly moverSecurityContext?:
    ReplicationDestinationSpecRcloneMoverSecurityContext;

  /**
   * MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as the ReplicationDestination.
   *
   * @schema ReplicationDestinationSpecRclone#moverServiceAccount
   */
  readonly moverServiceAccount?: string;

  /**
   * RcloneConfig is the rclone secret name
   *
   * @schema ReplicationDestinationSpecRclone#rcloneConfig
   */
  readonly rcloneConfig?: string;

  /**
   * RcloneConfigSection is the section in rclone_config file to use for the current job.
   *
   * @schema ReplicationDestinationSpecRclone#rcloneConfigSection
   */
  readonly rcloneConfigSection?: string;

  /**
   * RcloneDestPath is the remote path to sync to.
   *
   * @schema ReplicationDestinationSpecRclone#rcloneDestPath
   */
  readonly rcloneDestPath?: string;

  /**
   * storageClassName can be used to specify the StorageClass of the destination volume. If not set, the default StorageClass will be used.
   *
   * @schema ReplicationDestinationSpecRclone#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
   *
   * @schema ReplicationDestinationSpecRclone#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRclone' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRclone(
  obj: ReplicationDestinationSpecRclone | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "accessModes": obj.accessModes?.map((y) => y),
    "capacity": obj.capacity?.value,
    "copyMethod": obj.copyMethod,
    "customCA": toJson_ReplicationDestinationSpecRcloneCustomCa(obj.customCa),
    "destinationPVC": obj.destinationPvc,
    "moverSecurityContext":
      toJson_ReplicationDestinationSpecRcloneMoverSecurityContext(
        obj.moverSecurityContext,
      ),
    "moverServiceAccount": obj.moverServiceAccount,
    "rcloneConfig": obj.rcloneConfig,
    "rcloneConfigSection": obj.rcloneConfigSection,
    "rcloneDestPath": obj.rcloneDestPath,
    "storageClassName": obj.storageClassName,
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * restic defines the configuration when using Restic-based replication.
 *
 * @schema ReplicationDestinationSpecRestic
 */
export interface ReplicationDestinationSpecRestic {
  /**
   * accessModes specifies the access modes for the destination volume.
   *
   * @schema ReplicationDestinationSpecRestic#accessModes
   */
  readonly accessModes?: string[];

  /**
   * accessModes can be used to set the accessModes of restic metadata cache volume
   *
   * @schema ReplicationDestinationSpecRestic#cacheAccessModes
   */
  readonly cacheAccessModes?: string[];

  /**
   * cacheCapacity can be used to set the size of the restic metadata cache volume
   *
   * @schema ReplicationDestinationSpecRestic#cacheCapacity
   */
  readonly cacheCapacity?: ReplicationDestinationSpecResticCacheCapacity;

  /**
   * cacheStorageClassName can be used to set the StorageClass of the restic metadata cache volume
   *
   * @schema ReplicationDestinationSpecRestic#cacheStorageClassName
   */
  readonly cacheStorageClassName?: string;

  /**
   * capacity is the size of the destination volume to create.
   *
   * @schema ReplicationDestinationSpecRestic#capacity
   */
  readonly capacity?: ReplicationDestinationSpecResticCapacity;

  /**
   * copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
   *
   * @schema ReplicationDestinationSpecRestic#copyMethod
   */
  readonly copyMethod?: ReplicationDestinationSpecResticCopyMethod;

  /**
   * customCA is a custom CA that will be used to verify the remote
   *
   * @schema ReplicationDestinationSpecRestic#customCA
   */
  readonly customCa?: ReplicationDestinationSpecResticCustomCa;

  /**
   * destinationPVC is a PVC to use as the transfer destination instead of automatically provisioning one. Either this field or both capacity and accessModes must be specified.
   *
   * @schema ReplicationDestinationSpecRestic#destinationPVC
   */
  readonly destinationPvc?: string;

  /**
   * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
   *
   * @schema ReplicationDestinationSpecRestic#moverSecurityContext
   */
  readonly moverSecurityContext?:
    ReplicationDestinationSpecResticMoverSecurityContext;

  /**
   * MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as the ReplicationDestination.
   *
   * @schema ReplicationDestinationSpecRestic#moverServiceAccount
   */
  readonly moverServiceAccount?: string;

  /**
   * Previous specifies the number of image to skip before selecting one to restore from
   *
   * @schema ReplicationDestinationSpecRestic#previous
   */
  readonly previous?: number;

  /**
   * Repository is the secret name containing repository info
   *
   * @schema ReplicationDestinationSpecRestic#repository
   */
  readonly repository?: string;

  /**
   * RestoreAsOf refers to the backup that is most recent as of that time.
   *
   * @schema ReplicationDestinationSpecRestic#restoreAsOf
   */
  readonly restoreAsOf?: Date;

  /**
   * storageClassName can be used to specify the StorageClass of the destination volume. If not set, the default StorageClass will be used.
   *
   * @schema ReplicationDestinationSpecRestic#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
   *
   * @schema ReplicationDestinationSpecRestic#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRestic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRestic(
  obj: ReplicationDestinationSpecRestic | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "accessModes": obj.accessModes?.map((y) => y),
    "cacheAccessModes": obj.cacheAccessModes?.map((y) => y),
    "cacheCapacity": obj.cacheCapacity?.value,
    "cacheStorageClassName": obj.cacheStorageClassName,
    "capacity": obj.capacity?.value,
    "copyMethod": obj.copyMethod,
    "customCA": toJson_ReplicationDestinationSpecResticCustomCa(obj.customCa),
    "destinationPVC": obj.destinationPvc,
    "moverSecurityContext":
      toJson_ReplicationDestinationSpecResticMoverSecurityContext(
        obj.moverSecurityContext,
      ),
    "moverServiceAccount": obj.moverServiceAccount,
    "previous": obj.previous,
    "repository": obj.repository,
    "restoreAsOf": obj.restoreAsOf?.toISOString(),
    "storageClassName": obj.storageClassName,
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * rsync defines the configuration when using Rsync-based replication.
 *
 * @schema ReplicationDestinationSpecRsync
 */
export interface ReplicationDestinationSpecRsync {
  /**
   * accessModes specifies the access modes for the destination volume.
   *
   * @schema ReplicationDestinationSpecRsync#accessModes
   */
  readonly accessModes?: string[];

  /**
   * address is the remote address to connect to for replication.
   *
   * @schema ReplicationDestinationSpecRsync#address
   */
  readonly address?: string;

  /**
   * capacity is the size of the destination volume to create.
   *
   * @schema ReplicationDestinationSpecRsync#capacity
   */
  readonly capacity?: ReplicationDestinationSpecRsyncCapacity;

  /**
   * copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
   *
   * @schema ReplicationDestinationSpecRsync#copyMethod
   */
  readonly copyMethod?: ReplicationDestinationSpecRsyncCopyMethod;

  /**
   * destinationPVC is a PVC to use as the transfer destination instead of automatically provisioning one. Either this field or both capacity and accessModes must be specified.
   *
   * @schema ReplicationDestinationSpecRsync#destinationPVC
   */
  readonly destinationPvc?: string;

  /**
   * MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as the ReplicationDestination.
   *
   * @schema ReplicationDestinationSpecRsync#moverServiceAccount
   */
  readonly moverServiceAccount?: string;

  /**
   * path is the remote path to rsync from. Defaults to "/"
   *
   * @default "
   * @schema ReplicationDestinationSpecRsync#path
   */
  readonly path?: string;

  /**
   * port is the SSH port to connect to for replication. Defaults to 22.
   *
   * @default 22.
   * @schema ReplicationDestinationSpecRsync#port
   */
  readonly port?: number;

  /**
   * serviceAnnotations defines annotations that will be added to the service created for incoming SSH connections.  If set, these annotations will be used instead of any VolSync default values.
   *
   * @schema ReplicationDestinationSpecRsync#serviceAnnotations
   */
  readonly serviceAnnotations?: { [key: string]: string };

  /**
   * serviceType determines the Service type that will be created for incoming SSH connections.
   *
   * @schema ReplicationDestinationSpecRsync#serviceType
   */
  readonly serviceType?: string;

  /**
   * sshKeys is the name of a Secret that contains the SSH keys to be used for authentication. If not provided, the keys will be generated.
   *
   * @schema ReplicationDestinationSpecRsync#sshKeys
   */
  readonly sshKeys?: string;

  /**
   * sshUser is the username for outgoing SSH connections. Defaults to "root".
   *
   * @default root".
   * @schema ReplicationDestinationSpecRsync#sshUser
   */
  readonly sshUser?: string;

  /**
   * storageClassName can be used to specify the StorageClass of the destination volume. If not set, the default StorageClass will be used.
   *
   * @schema ReplicationDestinationSpecRsync#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
   *
   * @schema ReplicationDestinationSpecRsync#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRsync' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRsync(
  obj: ReplicationDestinationSpecRsync | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "accessModes": obj.accessModes?.map((y) => y),
    "address": obj.address,
    "capacity": obj.capacity?.value,
    "copyMethod": obj.copyMethod,
    "destinationPVC": obj.destinationPvc,
    "moverServiceAccount": obj.moverServiceAccount,
    "path": obj.path,
    "port": obj.port,
    "serviceAnnotations": ((obj.serviceAnnotations) === undefined)
      ? undefined
      : (Object.entries(obj.serviceAnnotations).reduce(
        (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
        {},
      )),
    "serviceType": obj.serviceType,
    "sshKeys": obj.sshKeys,
    "sshUser": obj.sshUser,
    "storageClassName": obj.storageClassName,
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * rsyncTLS defines the configuration when using Rsync-based replication over TLS.
 *
 * @schema ReplicationDestinationSpecRsyncTls
 */
export interface ReplicationDestinationSpecRsyncTls {
  /**
   * accessModes specifies the access modes for the destination volume.
   *
   * @schema ReplicationDestinationSpecRsyncTls#accessModes
   */
  readonly accessModes?: string[];

  /**
   * capacity is the size of the destination volume to create.
   *
   * @schema ReplicationDestinationSpecRsyncTls#capacity
   */
  readonly capacity?: ReplicationDestinationSpecRsyncTlsCapacity;

  /**
   * copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
   *
   * @schema ReplicationDestinationSpecRsyncTls#copyMethod
   */
  readonly copyMethod?: ReplicationDestinationSpecRsyncTlsCopyMethod;

  /**
   * destinationPVC is a PVC to use as the transfer destination instead of automatically provisioning one. Either this field or both capacity and accessModes must be specified.
   *
   * @schema ReplicationDestinationSpecRsyncTls#destinationPVC
   */
  readonly destinationPvc?: string;

  /**
   * keySecret is the name of a Secret that contains the TLS pre-shared key to be used for authentication. If not provided, the key will be generated.
   *
   * @schema ReplicationDestinationSpecRsyncTls#keySecret
   */
  readonly keySecret?: string;

  /**
   * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
   *
   * @schema ReplicationDestinationSpecRsyncTls#moverSecurityContext
   */
  readonly moverSecurityContext?:
    ReplicationDestinationSpecRsyncTlsMoverSecurityContext;

  /**
   * MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as the ReplicationDestination.
   *
   * @schema ReplicationDestinationSpecRsyncTls#moverServiceAccount
   */
  readonly moverServiceAccount?: string;

  /**
   * serviceAnnotations defines annotations that will be added to the service created for incoming SSH connections.  If set, these annotations will be used instead of any VolSync default values.
   *
   * @schema ReplicationDestinationSpecRsyncTls#serviceAnnotations
   */
  readonly serviceAnnotations?: { [key: string]: string };

  /**
   * serviceType determines the Service type that will be created for incoming TLS connections.
   *
   * @schema ReplicationDestinationSpecRsyncTls#serviceType
   */
  readonly serviceType?: string;

  /**
   * storageClassName can be used to specify the StorageClass of the destination volume. If not set, the default StorageClass will be used.
   *
   * @schema ReplicationDestinationSpecRsyncTls#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
   *
   * @schema ReplicationDestinationSpecRsyncTls#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRsyncTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRsyncTls(
  obj: ReplicationDestinationSpecRsyncTls | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "accessModes": obj.accessModes?.map((y) => y),
    "capacity": obj.capacity?.value,
    "copyMethod": obj.copyMethod,
    "destinationPVC": obj.destinationPvc,
    "keySecret": obj.keySecret,
    "moverSecurityContext":
      toJson_ReplicationDestinationSpecRsyncTlsMoverSecurityContext(
        obj.moverSecurityContext,
      ),
    "moverServiceAccount": obj.moverServiceAccount,
    "serviceAnnotations": ((obj.serviceAnnotations) === undefined)
      ? undefined
      : (Object.entries(obj.serviceAnnotations).reduce(
        (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
        {},
      )),
    "serviceType": obj.serviceType,
    "storageClassName": obj.storageClassName,
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * trigger determines if/when the destination should attempt to synchronize data with the source.
 *
 * @schema ReplicationDestinationSpecTrigger
 */
export interface ReplicationDestinationSpecTrigger {
  /**
   * manual is a string value that schedules a manual trigger. Once a sync completes then status.lastManualSync is set to the same string value. A consumer of a manual trigger should set spec.trigger.manual to a known value and then wait for lastManualSync to be updated by the operator to the same value, which means that the manual trigger will then pause and wait for further updates to the trigger.
   *
   * @schema ReplicationDestinationSpecTrigger#manual
   */
  readonly manual?: string;

  /**
   * schedule is a cronspec (https://en.wikipedia.org/wiki/Cron#Overview) that can be used to schedule replication to occur at regular, time-based intervals. nolint:lll
   *
   * @schema ReplicationDestinationSpecTrigger#schedule
   */
  readonly schedule?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecTrigger' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecTrigger(
  obj: ReplicationDestinationSpecTrigger | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "manual": obj.manual,
    "schedule": obj.schedule,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * capacity is the size of the destination volume to create.
 *
 * @schema ReplicationDestinationSpecRcloneCapacity
 */
export class ReplicationDestinationSpecRcloneCapacity {
  public static fromNumber(
    value: number,
  ): ReplicationDestinationSpecRcloneCapacity {
    return new ReplicationDestinationSpecRcloneCapacity(value);
  }
  public static fromString(
    value: string,
  ): ReplicationDestinationSpecRcloneCapacity {
    return new ReplicationDestinationSpecRcloneCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
 *
 * @schema ReplicationDestinationSpecRcloneCopyMethod
 */
export enum ReplicationDestinationSpecRcloneCopyMethod {
  /** Direct */
  DIRECT = "Direct",
  /** None */
  NONE = "None",
  /** Clone */
  CLONE = "Clone",
  /** Snapshot */
  SNAPSHOT = "Snapshot",
}

/**
 * customCA is a custom CA that will be used to verify the remote
 *
 * @schema ReplicationDestinationSpecRcloneCustomCa
 */
export interface ReplicationDestinationSpecRcloneCustomCa {
  /**
   * The name of a ConfigMap that contains the custom CA certificate If ConfigMapName is used then SecretName should not be set
   *
   * @schema ReplicationDestinationSpecRcloneCustomCa#configMapName
   */
  readonly configMapName?: string;

  /**
   * The key within the Secret or ConfigMap containing the CA certificate
   *
   * @schema ReplicationDestinationSpecRcloneCustomCa#key
   */
  readonly key?: string;

  /**
   * The name of a Secret that contains the custom CA certificate If SecretName is used then ConfigMapName should not be set
   *
   * @schema ReplicationDestinationSpecRcloneCustomCa#secretName
   */
  readonly secretName?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRcloneCustomCa' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRcloneCustomCa(
  obj: ReplicationDestinationSpecRcloneCustomCa | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "configMapName": obj.configMapName,
    "key": obj.key,
    "secretName": obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
 *
 * @schema ReplicationDestinationSpecRcloneMoverSecurityContext
 */
export interface ReplicationDestinationSpecRcloneMoverSecurityContext {
  /**
   * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
   * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
   * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContext#fsGroupChangePolicy
   */
  readonly fsGroupChangePolicy?: string;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @default user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?:
    ReplicationDestinationSpecRcloneMoverSecurityContextSeLinuxOptions;

  /**
   * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContext#seccompProfile
   */
  readonly seccompProfile?:
    ReplicationDestinationSpecRcloneMoverSecurityContextSeccompProfile;

  /**
   * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContext#sysctls
   */
  readonly sysctls?:
    ReplicationDestinationSpecRcloneMoverSecurityContextSysctls[];

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContext#windowsOptions
   */
  readonly windowsOptions?:
    ReplicationDestinationSpecRcloneMoverSecurityContextWindowsOptions;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRcloneMoverSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRcloneMoverSecurityContext(
  obj: ReplicationDestinationSpecRcloneMoverSecurityContext | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "fsGroup": obj.fsGroup,
    "fsGroupChangePolicy": obj.fsGroupChangePolicy,
    "runAsGroup": obj.runAsGroup,
    "runAsNonRoot": obj.runAsNonRoot,
    "runAsUser": obj.runAsUser,
    "seLinuxOptions":
      toJson_ReplicationDestinationSpecRcloneMoverSecurityContextSeLinuxOptions(
        obj.seLinuxOptions,
      ),
    "seccompProfile":
      toJson_ReplicationDestinationSpecRcloneMoverSecurityContextSeccompProfile(
        obj.seccompProfile,
      ),
    "supplementalGroups": obj.supplementalGroups?.map((y) => y),
    "sysctls": obj.sysctls?.map((y) =>
      toJson_ReplicationDestinationSpecRcloneMoverSecurityContextSysctls(y)
    ),
    "windowsOptions":
      toJson_ReplicationDestinationSpecRcloneMoverSecurityContextWindowsOptions(
        obj.windowsOptions,
      ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * cacheCapacity can be used to set the size of the restic metadata cache volume
 *
 * @schema ReplicationDestinationSpecResticCacheCapacity
 */
export class ReplicationDestinationSpecResticCacheCapacity {
  public static fromNumber(
    value: number,
  ): ReplicationDestinationSpecResticCacheCapacity {
    return new ReplicationDestinationSpecResticCacheCapacity(value);
  }
  public static fromString(
    value: string,
  ): ReplicationDestinationSpecResticCacheCapacity {
    return new ReplicationDestinationSpecResticCacheCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * capacity is the size of the destination volume to create.
 *
 * @schema ReplicationDestinationSpecResticCapacity
 */
export class ReplicationDestinationSpecResticCapacity {
  public static fromNumber(
    value: number,
  ): ReplicationDestinationSpecResticCapacity {
    return new ReplicationDestinationSpecResticCapacity(value);
  }
  public static fromString(
    value: string,
  ): ReplicationDestinationSpecResticCapacity {
    return new ReplicationDestinationSpecResticCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
 *
 * @schema ReplicationDestinationSpecResticCopyMethod
 */
export enum ReplicationDestinationSpecResticCopyMethod {
  /** Direct */
  DIRECT = "Direct",
  /** None */
  NONE = "None",
  /** Clone */
  CLONE = "Clone",
  /** Snapshot */
  SNAPSHOT = "Snapshot",
}

/**
 * customCA is a custom CA that will be used to verify the remote
 *
 * @schema ReplicationDestinationSpecResticCustomCa
 */
export interface ReplicationDestinationSpecResticCustomCa {
  /**
   * The name of a ConfigMap that contains the custom CA certificate If ConfigMapName is used then SecretName should not be set
   *
   * @schema ReplicationDestinationSpecResticCustomCa#configMapName
   */
  readonly configMapName?: string;

  /**
   * The key within the Secret or ConfigMap containing the CA certificate
   *
   * @schema ReplicationDestinationSpecResticCustomCa#key
   */
  readonly key?: string;

  /**
   * The name of a Secret that contains the custom CA certificate If SecretName is used then ConfigMapName should not be set
   *
   * @schema ReplicationDestinationSpecResticCustomCa#secretName
   */
  readonly secretName?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecResticCustomCa' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecResticCustomCa(
  obj: ReplicationDestinationSpecResticCustomCa | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "configMapName": obj.configMapName,
    "key": obj.key,
    "secretName": obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
 *
 * @schema ReplicationDestinationSpecResticMoverSecurityContext
 */
export interface ReplicationDestinationSpecResticMoverSecurityContext {
  /**
   * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
   * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
   * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContext#fsGroupChangePolicy
   */
  readonly fsGroupChangePolicy?: string;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @default user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   * @schema ReplicationDestinationSpecResticMoverSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?:
    ReplicationDestinationSpecResticMoverSecurityContextSeLinuxOptions;

  /**
   * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContext#seccompProfile
   */
  readonly seccompProfile?:
    ReplicationDestinationSpecResticMoverSecurityContextSeccompProfile;

  /**
   * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContext#sysctls
   */
  readonly sysctls?:
    ReplicationDestinationSpecResticMoverSecurityContextSysctls[];

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContext#windowsOptions
   */
  readonly windowsOptions?:
    ReplicationDestinationSpecResticMoverSecurityContextWindowsOptions;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecResticMoverSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecResticMoverSecurityContext(
  obj: ReplicationDestinationSpecResticMoverSecurityContext | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "fsGroup": obj.fsGroup,
    "fsGroupChangePolicy": obj.fsGroupChangePolicy,
    "runAsGroup": obj.runAsGroup,
    "runAsNonRoot": obj.runAsNonRoot,
    "runAsUser": obj.runAsUser,
    "seLinuxOptions":
      toJson_ReplicationDestinationSpecResticMoverSecurityContextSeLinuxOptions(
        obj.seLinuxOptions,
      ),
    "seccompProfile":
      toJson_ReplicationDestinationSpecResticMoverSecurityContextSeccompProfile(
        obj.seccompProfile,
      ),
    "supplementalGroups": obj.supplementalGroups?.map((y) => y),
    "sysctls": obj.sysctls?.map((y) =>
      toJson_ReplicationDestinationSpecResticMoverSecurityContextSysctls(y)
    ),
    "windowsOptions":
      toJson_ReplicationDestinationSpecResticMoverSecurityContextWindowsOptions(
        obj.windowsOptions,
      ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * capacity is the size of the destination volume to create.
 *
 * @schema ReplicationDestinationSpecRsyncCapacity
 */
export class ReplicationDestinationSpecRsyncCapacity {
  public static fromNumber(
    value: number,
  ): ReplicationDestinationSpecRsyncCapacity {
    return new ReplicationDestinationSpecRsyncCapacity(value);
  }
  public static fromString(
    value: string,
  ): ReplicationDestinationSpecRsyncCapacity {
    return new ReplicationDestinationSpecRsyncCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
 *
 * @schema ReplicationDestinationSpecRsyncCopyMethod
 */
export enum ReplicationDestinationSpecRsyncCopyMethod {
  /** Direct */
  DIRECT = "Direct",
  /** None */
  NONE = "None",
  /** Clone */
  CLONE = "Clone",
  /** Snapshot */
  SNAPSHOT = "Snapshot",
}

/**
 * capacity is the size of the destination volume to create.
 *
 * @schema ReplicationDestinationSpecRsyncTlsCapacity
 */
export class ReplicationDestinationSpecRsyncTlsCapacity {
  public static fromNumber(
    value: number,
  ): ReplicationDestinationSpecRsyncTlsCapacity {
    return new ReplicationDestinationSpecRsyncTlsCapacity(value);
  }
  public static fromString(
    value: string,
  ): ReplicationDestinationSpecRsyncTlsCapacity {
    return new ReplicationDestinationSpecRsyncTlsCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * copyMethod describes how a point-in-time (PiT) image of the destination volume should be created.
 *
 * @schema ReplicationDestinationSpecRsyncTlsCopyMethod
 */
export enum ReplicationDestinationSpecRsyncTlsCopyMethod {
  /** Direct */
  DIRECT = "Direct",
  /** None */
  NONE = "None",
  /** Clone */
  CLONE = "Clone",
  /** Snapshot */
  SNAPSHOT = "Snapshot",
}

/**
 * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
 *
 * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContext
 */
export interface ReplicationDestinationSpecRsyncTlsMoverSecurityContext {
  /**
   * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
   * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
   * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContext#fsGroupChangePolicy
   */
  readonly fsGroupChangePolicy?: string;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @default user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?:
    ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeLinuxOptions;

  /**
   * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContext#seccompProfile
   */
  readonly seccompProfile?:
    ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeccompProfile;

  /**
   * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContext#sysctls
   */
  readonly sysctls?:
    ReplicationDestinationSpecRsyncTlsMoverSecurityContextSysctls[];

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContext#windowsOptions
   */
  readonly windowsOptions?:
    ReplicationDestinationSpecRsyncTlsMoverSecurityContextWindowsOptions;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRsyncTlsMoverSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRsyncTlsMoverSecurityContext(
  obj: ReplicationDestinationSpecRsyncTlsMoverSecurityContext | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "fsGroup": obj.fsGroup,
    "fsGroupChangePolicy": obj.fsGroupChangePolicy,
    "runAsGroup": obj.runAsGroup,
    "runAsNonRoot": obj.runAsNonRoot,
    "runAsUser": obj.runAsUser,
    "seLinuxOptions":
      toJson_ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeLinuxOptions(
        obj.seLinuxOptions,
      ),
    "seccompProfile":
      toJson_ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeccompProfile(
        obj.seccompProfile,
      ),
    "supplementalGroups": obj.supplementalGroups?.map((y) => y),
    "sysctls": obj.sysctls?.map((y) =>
      toJson_ReplicationDestinationSpecRsyncTlsMoverSecurityContextSysctls(y)
    ),
    "windowsOptions":
      toJson_ReplicationDestinationSpecRsyncTlsMoverSecurityContextWindowsOptions(
        obj.windowsOptions,
      ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationDestinationSpecRcloneMoverSecurityContextSeLinuxOptions
 */
export interface ReplicationDestinationSpecRcloneMoverSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRcloneMoverSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRcloneMoverSecurityContextSeLinuxOptions(
  obj:
    | ReplicationDestinationSpecRcloneMoverSecurityContextSeLinuxOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "level": obj.level,
    "role": obj.role,
    "type": obj.type,
    "user": obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationDestinationSpecRcloneMoverSecurityContextSeccompProfile
 */
export interface ReplicationDestinationSpecRcloneMoverSecurityContextSeccompProfile {
  /**
   * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * type indicates which kind of seccomp profile will be applied. Valid options are:
   * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextSeccompProfile#type
   */
  readonly type: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRcloneMoverSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRcloneMoverSecurityContextSeccompProfile(
  obj:
    | ReplicationDestinationSpecRcloneMoverSecurityContextSeccompProfile
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "localhostProfile": obj.localhostProfile,
    "type": obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sysctl defines a kernel parameter to be set
 *
 * @schema ReplicationDestinationSpecRcloneMoverSecurityContextSysctls
 */
export interface ReplicationDestinationSpecRcloneMoverSecurityContextSysctls {
  /**
   * Name of a property to set
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextSysctls#name
   */
  readonly name: string;

  /**
   * Value of a property to set
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextSysctls#value
   */
  readonly value: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRcloneMoverSecurityContextSysctls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRcloneMoverSecurityContextSysctls(
  obj: ReplicationDestinationSpecRcloneMoverSecurityContextSysctls | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "name": obj.name,
    "value": obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
 *
 * @schema ReplicationDestinationSpecRcloneMoverSecurityContextWindowsOptions
 */
export interface ReplicationDestinationSpecRcloneMoverSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
   *
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema ReplicationDestinationSpecRcloneMoverSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRcloneMoverSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRcloneMoverSecurityContextWindowsOptions(
  obj:
    | ReplicationDestinationSpecRcloneMoverSecurityContextWindowsOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "gmsaCredentialSpec": obj.gmsaCredentialSpec,
    "gmsaCredentialSpecName": obj.gmsaCredentialSpecName,
    "hostProcess": obj.hostProcess,
    "runAsUserName": obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationDestinationSpecResticMoverSecurityContextSeLinuxOptions
 */
export interface ReplicationDestinationSpecResticMoverSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecResticMoverSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecResticMoverSecurityContextSeLinuxOptions(
  obj:
    | ReplicationDestinationSpecResticMoverSecurityContextSeLinuxOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "level": obj.level,
    "role": obj.role,
    "type": obj.type,
    "user": obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationDestinationSpecResticMoverSecurityContextSeccompProfile
 */
export interface ReplicationDestinationSpecResticMoverSecurityContextSeccompProfile {
  /**
   * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * type indicates which kind of seccomp profile will be applied. Valid options are:
   * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContextSeccompProfile#type
   */
  readonly type: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecResticMoverSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecResticMoverSecurityContextSeccompProfile(
  obj:
    | ReplicationDestinationSpecResticMoverSecurityContextSeccompProfile
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "localhostProfile": obj.localhostProfile,
    "type": obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sysctl defines a kernel parameter to be set
 *
 * @schema ReplicationDestinationSpecResticMoverSecurityContextSysctls
 */
export interface ReplicationDestinationSpecResticMoverSecurityContextSysctls {
  /**
   * Name of a property to set
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContextSysctls#name
   */
  readonly name: string;

  /**
   * Value of a property to set
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContextSysctls#value
   */
  readonly value: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecResticMoverSecurityContextSysctls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecResticMoverSecurityContextSysctls(
  obj: ReplicationDestinationSpecResticMoverSecurityContextSysctls | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "name": obj.name,
    "value": obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
 *
 * @schema ReplicationDestinationSpecResticMoverSecurityContextWindowsOptions
 */
export interface ReplicationDestinationSpecResticMoverSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
   *
   * @schema ReplicationDestinationSpecResticMoverSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema ReplicationDestinationSpecResticMoverSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecResticMoverSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecResticMoverSecurityContextWindowsOptions(
  obj:
    | ReplicationDestinationSpecResticMoverSecurityContextWindowsOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "gmsaCredentialSpec": obj.gmsaCredentialSpec,
    "gmsaCredentialSpecName": obj.gmsaCredentialSpecName,
    "hostProcess": obj.hostProcess,
    "runAsUserName": obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeLinuxOptions
 */
export interface ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeLinuxOptions(
  obj:
    | ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeLinuxOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "level": obj.level,
    "role": obj.role,
    "type": obj.type,
    "user": obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeccompProfile
 */
export interface ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeccompProfile {
  /**
   * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * type indicates which kind of seccomp profile will be applied. Valid options are:
   * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeccompProfile#type
   */
  readonly type: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeccompProfile(
  obj:
    | ReplicationDestinationSpecRsyncTlsMoverSecurityContextSeccompProfile
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "localhostProfile": obj.localhostProfile,
    "type": obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sysctl defines a kernel parameter to be set
 *
 * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextSysctls
 */
export interface ReplicationDestinationSpecRsyncTlsMoverSecurityContextSysctls {
  /**
   * Name of a property to set
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextSysctls#name
   */
  readonly name: string;

  /**
   * Value of a property to set
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextSysctls#value
   */
  readonly value: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRsyncTlsMoverSecurityContextSysctls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRsyncTlsMoverSecurityContextSysctls(
  obj:
    | ReplicationDestinationSpecRsyncTlsMoverSecurityContextSysctls
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "name": obj.name,
    "value": obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
 *
 * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextWindowsOptions
 */
export interface ReplicationDestinationSpecRsyncTlsMoverSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
   *
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema ReplicationDestinationSpecRsyncTlsMoverSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;
}

/**
 * Converts an object of type 'ReplicationDestinationSpecRsyncTlsMoverSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationDestinationSpecRsyncTlsMoverSecurityContextWindowsOptions(
  obj:
    | ReplicationDestinationSpecRsyncTlsMoverSecurityContextWindowsOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "gmsaCredentialSpec": obj.gmsaCredentialSpec,
    "gmsaCredentialSpecName": obj.gmsaCredentialSpecName,
    "hostProcess": obj.hostProcess,
    "runAsUserName": obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ReplicationSource defines the source for a replicated volume
 *
 * @schema ReplicationSource
 */
export class ReplicationSource extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ReplicationSource"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: "volsync.backube/v1alpha1",
    kind: "ReplicationSource",
  };

  /**
   * Renders a Kubernetes manifest for "ReplicationSource".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ReplicationSourceProps = {}): any {
    return {
      ...ReplicationSource.GVK,
      ...toJson_ReplicationSourceProps(props),
    };
  }

  /**
   * Defines a "ReplicationSource" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(
    scope: Construct,
    id: string,
    props: ReplicationSourceProps = {},
  ) {
    super(scope, id, {
      ...ReplicationSource.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...ReplicationSource.GVK,
      ...toJson_ReplicationSourceProps(resolved),
    };
  }
}

/**
 * ReplicationSource defines the source for a replicated volume
 *
 * @schema ReplicationSource
 */
export interface ReplicationSourceProps {
  /**
   * @schema ReplicationSource#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * spec is the desired state of the ReplicationSource, including the replication method to use and its configuration.
   *
   * @schema ReplicationSource#spec
   */
  readonly spec?: ReplicationSourceSpec;
}

/**
 * Converts an object of type 'ReplicationSourceProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceProps(
  obj: ReplicationSourceProps | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "metadata": obj.metadata,
    "spec": toJson_ReplicationSourceSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * spec is the desired state of the ReplicationSource, including the replication method to use and its configuration.
 *
 * @schema ReplicationSourceSpec
 */
export interface ReplicationSourceSpec {
  /**
   * external defines the configuration when using an external replication provider.
   *
   * @schema ReplicationSourceSpec#external
   */
  readonly external?: ReplicationSourceSpecExternal;

  /**
   * paused can be used to temporarily stop replication. Defaults to "false".
   *
   * @default false".
   * @schema ReplicationSourceSpec#paused
   */
  readonly paused?: boolean;

  /**
   * rclone defines the configuration when using Rclone-based replication.
   *
   * @schema ReplicationSourceSpec#rclone
   */
  readonly rclone?: ReplicationSourceSpecRclone;

  /**
   * restic defines the configuration when using Restic-based replication.
   *
   * @schema ReplicationSourceSpec#restic
   */
  readonly restic?: ReplicationSourceSpecRestic;

  /**
   * rsync defines the configuration when using Rsync-based replication.
   *
   * @schema ReplicationSourceSpec#rsync
   */
  readonly rsync?: ReplicationSourceSpecRsync;

  /**
   * rsyncTLS defines the configuration when using Rsync-based replication over TLS.
   *
   * @schema ReplicationSourceSpec#rsyncTLS
   */
  readonly rsyncTls?: ReplicationSourceSpecRsyncTls;

  /**
   * sourcePVC is the name of the PersistentVolumeClaim (PVC) to replicate.
   *
   * @schema ReplicationSourceSpec#sourcePVC
   */
  readonly sourcePvc?: string;

  /**
   * syncthing defines the configuration when using Syncthing-based replication.
   *
   * @schema ReplicationSourceSpec#syncthing
   */
  readonly syncthing?: ReplicationSourceSpecSyncthing;

  /**
   * trigger determines when the latest state of the volume will be captured (and potentially replicated to the destination).
   *
   * @schema ReplicationSourceSpec#trigger
   */
  readonly trigger?: ReplicationSourceSpecTrigger;
}

/**
 * Converts an object of type 'ReplicationSourceSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpec(
  obj: ReplicationSourceSpec | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "external": toJson_ReplicationSourceSpecExternal(obj.external),
    "paused": obj.paused,
    "rclone": toJson_ReplicationSourceSpecRclone(obj.rclone),
    "restic": toJson_ReplicationSourceSpecRestic(obj.restic),
    "rsync": toJson_ReplicationSourceSpecRsync(obj.rsync),
    "rsyncTLS": toJson_ReplicationSourceSpecRsyncTls(obj.rsyncTls),
    "sourcePVC": obj.sourcePvc,
    "syncthing": toJson_ReplicationSourceSpecSyncthing(obj.syncthing),
    "trigger": toJson_ReplicationSourceSpecTrigger(obj.trigger),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * external defines the configuration when using an external replication provider.
 *
 * @schema ReplicationSourceSpecExternal
 */
export interface ReplicationSourceSpecExternal {
  /**
   * parameters are provider-specific key/value configuration parameters. For more information, please see the documentation of the specific replication provider being used.
   *
   * @schema ReplicationSourceSpecExternal#parameters
   */
  readonly parameters?: { [key: string]: string };

  /**
   * provider is the name of the external replication provider. The name should be of the form: domain.com/provider.
   *
   * @schema ReplicationSourceSpecExternal#provider
   */
  readonly provider?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecExternal' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecExternal(
  obj: ReplicationSourceSpecExternal | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "parameters": ((obj.parameters) === undefined)
      ? undefined
      : (Object.entries(obj.parameters).reduce(
        (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
        {},
      )),
    "provider": obj.provider,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * rclone defines the configuration when using Rclone-based replication.
 *
 * @schema ReplicationSourceSpecRclone
 */
export interface ReplicationSourceSpecRclone {
  /**
   * accessModes can be used to override the accessModes of the PiT image.
   *
   * @schema ReplicationSourceSpecRclone#accessModes
   */
  readonly accessModes?: string[];

  /**
   * capacity can be used to override the capacity of the PiT image.
   *
   * @schema ReplicationSourceSpecRclone#capacity
   */
  readonly capacity?: ReplicationSourceSpecRcloneCapacity;

  /**
   * copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
   *
   * @schema ReplicationSourceSpecRclone#copyMethod
   */
  readonly copyMethod?: ReplicationSourceSpecRcloneCopyMethod;

  /**
   * customCA is a custom CA that will be used to verify the remote
   *
   * @schema ReplicationSourceSpecRclone#customCA
   */
  readonly customCa?: ReplicationSourceSpecRcloneCustomCa;

  /**
   * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
   *
   * @schema ReplicationSourceSpecRclone#moverSecurityContext
   */
  readonly moverSecurityContext?:
    ReplicationSourceSpecRcloneMoverSecurityContext;

  /**
   * MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as the ReplicationSource.
   *
   * @schema ReplicationSourceSpecRclone#moverServiceAccount
   */
  readonly moverServiceAccount?: string;

  /**
   * RcloneConfig is the rclone secret name
   *
   * @schema ReplicationSourceSpecRclone#rcloneConfig
   */
  readonly rcloneConfig?: string;

  /**
   * RcloneConfigSection is the section in rclone_config file to use for the current job.
   *
   * @schema ReplicationSourceSpecRclone#rcloneConfigSection
   */
  readonly rcloneConfigSection?: string;

  /**
   * RcloneDestPath is the remote path to sync to.
   *
   * @schema ReplicationSourceSpecRclone#rcloneDestPath
   */
  readonly rcloneDestPath?: string;

  /**
   * storageClassName can be used to override the StorageClass of the PiT image.
   *
   * @schema ReplicationSourceSpecRclone#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
   *
   * @schema ReplicationSourceSpecRclone#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRclone' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRclone(
  obj: ReplicationSourceSpecRclone | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "accessModes": obj.accessModes?.map((y) => y),
    "capacity": obj.capacity?.value,
    "copyMethod": obj.copyMethod,
    "customCA": toJson_ReplicationSourceSpecRcloneCustomCa(obj.customCa),
    "moverSecurityContext":
      toJson_ReplicationSourceSpecRcloneMoverSecurityContext(
        obj.moverSecurityContext,
      ),
    "moverServiceAccount": obj.moverServiceAccount,
    "rcloneConfig": obj.rcloneConfig,
    "rcloneConfigSection": obj.rcloneConfigSection,
    "rcloneDestPath": obj.rcloneDestPath,
    "storageClassName": obj.storageClassName,
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * restic defines the configuration when using Restic-based replication.
 *
 * @schema ReplicationSourceSpecRestic
 */
export interface ReplicationSourceSpecRestic {
  /**
   * accessModes can be used to override the accessModes of the PiT image.
   *
   * @schema ReplicationSourceSpecRestic#accessModes
   */
  readonly accessModes?: string[];

  /**
   * CacheAccessModes can be used to set the accessModes of restic metadata cache volume
   *
   * @schema ReplicationSourceSpecRestic#cacheAccessModes
   */
  readonly cacheAccessModes?: string[];

  /**
   * cacheCapacity can be used to set the size of the restic metadata cache volume
   *
   * @schema ReplicationSourceSpecRestic#cacheCapacity
   */
  readonly cacheCapacity?: ReplicationSourceSpecResticCacheCapacity;

  /**
   * cacheStorageClassName can be used to set the StorageClass of the restic metadata cache volume
   *
   * @schema ReplicationSourceSpecRestic#cacheStorageClassName
   */
  readonly cacheStorageClassName?: string;

  /**
   * capacity can be used to override the capacity of the PiT image.
   *
   * @schema ReplicationSourceSpecRestic#capacity
   */
  readonly capacity?: ReplicationSourceSpecResticCapacity;

  /**
   * copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
   *
   * @schema ReplicationSourceSpecRestic#copyMethod
   */
  readonly copyMethod?: ReplicationSourceSpecResticCopyMethod;

  /**
   * customCA is a custom CA that will be used to verify the remote
   *
   * @schema ReplicationSourceSpecRestic#customCA
   */
  readonly customCa?: ReplicationSourceSpecResticCustomCa;

  /**
   * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
   *
   * @schema ReplicationSourceSpecRestic#moverSecurityContext
   */
  readonly moverSecurityContext?:
    ReplicationSourceSpecResticMoverSecurityContext;

  /**
   * MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as the ReplicationSource.
   *
   * @schema ReplicationSourceSpecRestic#moverServiceAccount
   */
  readonly moverServiceAccount?: string;

  /**
   * PruneIntervalDays define how often to prune the repository
   *
   * @schema ReplicationSourceSpecRestic#pruneIntervalDays
   */
  readonly pruneIntervalDays?: number;

  /**
   * Repository is the secret name containing repository info
   *
   * @schema ReplicationSourceSpecRestic#repository
   */
  readonly repository?: string;

  /**
   * ResticRetainPolicy define the retain policy
   *
   * @schema ReplicationSourceSpecRestic#retain
   */
  readonly retain?: ReplicationSourceSpecResticRetain;

  /**
   * storageClassName can be used to override the StorageClass of the PiT image.
   *
   * @schema ReplicationSourceSpecRestic#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * unlock is a string value that schedules an unlock on the restic repository during the next sync operation. Once a sync completes then status.restic.lastUnlocked is set to the same string value. To unlock a repository, set spec.restic.unlock to a known value and then wait for lastUnlocked to be updated by the operator to the same value, which means that the sync unlocked the repository by running a restic unlock command and then ran a backup. Unlock will not be run again unless spec.restic.unlock is set to a different value.
   *
   * @schema ReplicationSourceSpecRestic#unlock
   */
  readonly unlock?: string;

  /**
   * volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
   *
   * @schema ReplicationSourceSpecRestic#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRestic' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRestic(
  obj: ReplicationSourceSpecRestic | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "accessModes": obj.accessModes?.map((y) => y),
    "cacheAccessModes": obj.cacheAccessModes?.map((y) => y),
    "cacheCapacity": obj.cacheCapacity?.value,
    "cacheStorageClassName": obj.cacheStorageClassName,
    "capacity": obj.capacity?.value,
    "copyMethod": obj.copyMethod,
    "customCA": toJson_ReplicationSourceSpecResticCustomCa(obj.customCa),
    "moverSecurityContext":
      toJson_ReplicationSourceSpecResticMoverSecurityContext(
        obj.moverSecurityContext,
      ),
    "moverServiceAccount": obj.moverServiceAccount,
    "pruneIntervalDays": obj.pruneIntervalDays,
    "repository": obj.repository,
    "retain": toJson_ReplicationSourceSpecResticRetain(obj.retain),
    "storageClassName": obj.storageClassName,
    "unlock": obj.unlock,
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * rsync defines the configuration when using Rsync-based replication.
 *
 * @schema ReplicationSourceSpecRsync
 */
export interface ReplicationSourceSpecRsync {
  /**
   * accessModes can be used to override the accessModes of the PiT image.
   *
   * @schema ReplicationSourceSpecRsync#accessModes
   */
  readonly accessModes?: string[];

  /**
   * address is the remote address to connect to for replication.
   *
   * @schema ReplicationSourceSpecRsync#address
   */
  readonly address?: string;

  /**
   * capacity can be used to override the capacity of the PiT image.
   *
   * @schema ReplicationSourceSpecRsync#capacity
   */
  readonly capacity?: ReplicationSourceSpecRsyncCapacity;

  /**
   * copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
   *
   * @schema ReplicationSourceSpecRsync#copyMethod
   */
  readonly copyMethod?: ReplicationSourceSpecRsyncCopyMethod;

  /**
   * MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as the ReplicationSource.
   *
   * @schema ReplicationSourceSpecRsync#moverServiceAccount
   */
  readonly moverServiceAccount?: string;

  /**
   * path is the remote path to rsync to. Defaults to "/"
   *
   * @default "
   * @schema ReplicationSourceSpecRsync#path
   */
  readonly path?: string;

  /**
   * port is the SSH port to connect to for replication. Defaults to 22.
   *
   * @default 22.
   * @schema ReplicationSourceSpecRsync#port
   */
  readonly port?: number;

  /**
   * serviceType determines the Service type that will be created for incoming SSH connections.
   *
   * @schema ReplicationSourceSpecRsync#serviceType
   */
  readonly serviceType?: string;

  /**
   * sshKeys is the name of a Secret that contains the SSH keys to be used for authentication. If not provided, the keys will be generated.
   *
   * @schema ReplicationSourceSpecRsync#sshKeys
   */
  readonly sshKeys?: string;

  /**
   * sshUser is the username for outgoing SSH connections. Defaults to "root".
   *
   * @default root".
   * @schema ReplicationSourceSpecRsync#sshUser
   */
  readonly sshUser?: string;

  /**
   * storageClassName can be used to override the StorageClass of the PiT image.
   *
   * @schema ReplicationSourceSpecRsync#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
   *
   * @schema ReplicationSourceSpecRsync#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRsync' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRsync(
  obj: ReplicationSourceSpecRsync | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "accessModes": obj.accessModes?.map((y) => y),
    "address": obj.address,
    "capacity": obj.capacity?.value,
    "copyMethod": obj.copyMethod,
    "moverServiceAccount": obj.moverServiceAccount,
    "path": obj.path,
    "port": obj.port,
    "serviceType": obj.serviceType,
    "sshKeys": obj.sshKeys,
    "sshUser": obj.sshUser,
    "storageClassName": obj.storageClassName,
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * rsyncTLS defines the configuration when using Rsync-based replication over TLS.
 *
 * @schema ReplicationSourceSpecRsyncTls
 */
export interface ReplicationSourceSpecRsyncTls {
  /**
   * accessModes can be used to override the accessModes of the PiT image.
   *
   * @schema ReplicationSourceSpecRsyncTls#accessModes
   */
  readonly accessModes?: string[];

  /**
   * address is the remote address to connect to for replication.
   *
   * @schema ReplicationSourceSpecRsyncTls#address
   */
  readonly address?: string;

  /**
   * capacity can be used to override the capacity of the PiT image.
   *
   * @schema ReplicationSourceSpecRsyncTls#capacity
   */
  readonly capacity?: ReplicationSourceSpecRsyncTlsCapacity;

  /**
   * copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
   *
   * @schema ReplicationSourceSpecRsyncTls#copyMethod
   */
  readonly copyMethod?: ReplicationSourceSpecRsyncTlsCopyMethod;

  /**
   * keySecret is the name of a Secret that contains the TLS pre-shared key to be used for authentication. If not provided, the key will be generated.
   *
   * @schema ReplicationSourceSpecRsyncTls#keySecret
   */
  readonly keySecret?: string;

  /**
   * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
   *
   * @schema ReplicationSourceSpecRsyncTls#moverSecurityContext
   */
  readonly moverSecurityContext?:
    ReplicationSourceSpecRsyncTlsMoverSecurityContext;

  /**
   * MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as the ReplicationSource.
   *
   * @schema ReplicationSourceSpecRsyncTls#moverServiceAccount
   */
  readonly moverServiceAccount?: string;

  /**
   * port is the port to connect to for replication. Defaults to 8000.
   *
   * @default 8000.
   * @schema ReplicationSourceSpecRsyncTls#port
   */
  readonly port?: number;

  /**
   * storageClassName can be used to override the StorageClass of the PiT image.
   *
   * @schema ReplicationSourceSpecRsyncTls#storageClassName
   */
  readonly storageClassName?: string;

  /**
   * volumeSnapshotClassName can be used to specify the VSC to be used if copyMethod is Snapshot. If not set, the default VSC is used.
   *
   * @schema ReplicationSourceSpecRsyncTls#volumeSnapshotClassName
   */
  readonly volumeSnapshotClassName?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRsyncTls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRsyncTls(
  obj: ReplicationSourceSpecRsyncTls | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "accessModes": obj.accessModes?.map((y) => y),
    "address": obj.address,
    "capacity": obj.capacity?.value,
    "copyMethod": obj.copyMethod,
    "keySecret": obj.keySecret,
    "moverSecurityContext":
      toJson_ReplicationSourceSpecRsyncTlsMoverSecurityContext(
        obj.moverSecurityContext,
      ),
    "moverServiceAccount": obj.moverServiceAccount,
    "port": obj.port,
    "storageClassName": obj.storageClassName,
    "volumeSnapshotClassName": obj.volumeSnapshotClassName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * syncthing defines the configuration when using Syncthing-based replication.
 *
 * @schema ReplicationSourceSpecSyncthing
 */
export interface ReplicationSourceSpecSyncthing {
  /**
   * Used to set the accessModes of Syncthing config volume.
   *
   * @schema ReplicationSourceSpecSyncthing#configAccessModes
   */
  readonly configAccessModes?: string[];

  /**
   * Used to set the size of the Syncthing config volume.
   *
   * @schema ReplicationSourceSpecSyncthing#configCapacity
   */
  readonly configCapacity?: ReplicationSourceSpecSyncthingConfigCapacity;

  /**
   * Used to set the StorageClass of the Syncthing config volume.
   *
   * @schema ReplicationSourceSpecSyncthing#configStorageClassName
   */
  readonly configStorageClassName?: string;

  /**
   * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
   *
   * @schema ReplicationSourceSpecSyncthing#moverSecurityContext
   */
  readonly moverSecurityContext?:
    ReplicationSourceSpecSyncthingMoverSecurityContext;

  /**
   * MoverServiceAccount allows specifying the name of the service account that will be used by the data mover. This should only be used by advanced users who want to override the service account normally used by the mover. The service account needs to exist in the same namespace as the ReplicationSource.
   *
   * @schema ReplicationSourceSpecSyncthing#moverServiceAccount
   */
  readonly moverServiceAccount?: string;

  /**
   * List of Syncthing peers to be connected for syncing
   *
   * @schema ReplicationSourceSpecSyncthing#peers
   */
  readonly peers?: ReplicationSourceSpecSyncthingPeers[];

  /**
   * Type of service to be used when exposing the Syncthing peer
   *
   * @schema ReplicationSourceSpecSyncthing#serviceType
   */
  readonly serviceType?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecSyncthing' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecSyncthing(
  obj: ReplicationSourceSpecSyncthing | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "configAccessModes": obj.configAccessModes?.map((y) => y),
    "configCapacity": obj.configCapacity?.value,
    "configStorageClassName": obj.configStorageClassName,
    "moverSecurityContext":
      toJson_ReplicationSourceSpecSyncthingMoverSecurityContext(
        obj.moverSecurityContext,
      ),
    "moverServiceAccount": obj.moverServiceAccount,
    "peers": obj.peers?.map((y) =>
      toJson_ReplicationSourceSpecSyncthingPeers(y)
    ),
    "serviceType": obj.serviceType,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * trigger determines when the latest state of the volume will be captured (and potentially replicated to the destination).
 *
 * @schema ReplicationSourceSpecTrigger
 */
export interface ReplicationSourceSpecTrigger {
  /**
   * manual is a string value that schedules a manual trigger. Once a sync completes then status.lastManualSync is set to the same string value. A consumer of a manual trigger should set spec.trigger.manual to a known value and then wait for lastManualSync to be updated by the operator to the same value, which means that the manual trigger will then pause and wait for further updates to the trigger.
   *
   * @schema ReplicationSourceSpecTrigger#manual
   */
  readonly manual?: string;

  /**
   * schedule is a cronspec (https://en.wikipedia.org/wiki/Cron#Overview) that can be used to schedule replication to occur at regular, time-based intervals. nolint:lll
   *
   * @schema ReplicationSourceSpecTrigger#schedule
   */
  readonly schedule?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecTrigger' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecTrigger(
  obj: ReplicationSourceSpecTrigger | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "manual": obj.manual,
    "schedule": obj.schedule,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * capacity can be used to override the capacity of the PiT image.
 *
 * @schema ReplicationSourceSpecRcloneCapacity
 */
export class ReplicationSourceSpecRcloneCapacity {
  public static fromNumber(value: number): ReplicationSourceSpecRcloneCapacity {
    return new ReplicationSourceSpecRcloneCapacity(value);
  }
  public static fromString(value: string): ReplicationSourceSpecRcloneCapacity {
    return new ReplicationSourceSpecRcloneCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
 *
 * @schema ReplicationSourceSpecRcloneCopyMethod
 */
export enum ReplicationSourceSpecRcloneCopyMethod {
  /** Direct */
  DIRECT = "Direct",
  /** None */
  NONE = "None",
  /** Clone */
  CLONE = "Clone",
  /** Snapshot */
  SNAPSHOT = "Snapshot",
}

/**
 * customCA is a custom CA that will be used to verify the remote
 *
 * @schema ReplicationSourceSpecRcloneCustomCa
 */
export interface ReplicationSourceSpecRcloneCustomCa {
  /**
   * The name of a ConfigMap that contains the custom CA certificate If ConfigMapName is used then SecretName should not be set
   *
   * @schema ReplicationSourceSpecRcloneCustomCa#configMapName
   */
  readonly configMapName?: string;

  /**
   * The key within the Secret or ConfigMap containing the CA certificate
   *
   * @schema ReplicationSourceSpecRcloneCustomCa#key
   */
  readonly key?: string;

  /**
   * The name of a Secret that contains the custom CA certificate If SecretName is used then ConfigMapName should not be set
   *
   * @schema ReplicationSourceSpecRcloneCustomCa#secretName
   */
  readonly secretName?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRcloneCustomCa' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRcloneCustomCa(
  obj: ReplicationSourceSpecRcloneCustomCa | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "configMapName": obj.configMapName,
    "key": obj.key,
    "secretName": obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
 *
 * @schema ReplicationSourceSpecRcloneMoverSecurityContext
 */
export interface ReplicationSourceSpecRcloneMoverSecurityContext {
  /**
   * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
   * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
   * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContext#fsGroupChangePolicy
   */
  readonly fsGroupChangePolicy?: string;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @default user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   * @schema ReplicationSourceSpecRcloneMoverSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?:
    ReplicationSourceSpecRcloneMoverSecurityContextSeLinuxOptions;

  /**
   * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContext#seccompProfile
   */
  readonly seccompProfile?:
    ReplicationSourceSpecRcloneMoverSecurityContextSeccompProfile;

  /**
   * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContext#sysctls
   */
  readonly sysctls?: ReplicationSourceSpecRcloneMoverSecurityContextSysctls[];

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContext#windowsOptions
   */
  readonly windowsOptions?:
    ReplicationSourceSpecRcloneMoverSecurityContextWindowsOptions;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRcloneMoverSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRcloneMoverSecurityContext(
  obj: ReplicationSourceSpecRcloneMoverSecurityContext | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "fsGroup": obj.fsGroup,
    "fsGroupChangePolicy": obj.fsGroupChangePolicy,
    "runAsGroup": obj.runAsGroup,
    "runAsNonRoot": obj.runAsNonRoot,
    "runAsUser": obj.runAsUser,
    "seLinuxOptions":
      toJson_ReplicationSourceSpecRcloneMoverSecurityContextSeLinuxOptions(
        obj.seLinuxOptions,
      ),
    "seccompProfile":
      toJson_ReplicationSourceSpecRcloneMoverSecurityContextSeccompProfile(
        obj.seccompProfile,
      ),
    "supplementalGroups": obj.supplementalGroups?.map((y) => y),
    "sysctls": obj.sysctls?.map((y) =>
      toJson_ReplicationSourceSpecRcloneMoverSecurityContextSysctls(y)
    ),
    "windowsOptions":
      toJson_ReplicationSourceSpecRcloneMoverSecurityContextWindowsOptions(
        obj.windowsOptions,
      ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * cacheCapacity can be used to set the size of the restic metadata cache volume
 *
 * @schema ReplicationSourceSpecResticCacheCapacity
 */
export class ReplicationSourceSpecResticCacheCapacity {
  public static fromNumber(
    value: number,
  ): ReplicationSourceSpecResticCacheCapacity {
    return new ReplicationSourceSpecResticCacheCapacity(value);
  }
  public static fromString(
    value: string,
  ): ReplicationSourceSpecResticCacheCapacity {
    return new ReplicationSourceSpecResticCacheCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * capacity can be used to override the capacity of the PiT image.
 *
 * @schema ReplicationSourceSpecResticCapacity
 */
export class ReplicationSourceSpecResticCapacity {
  public static fromNumber(value: number): ReplicationSourceSpecResticCapacity {
    return new ReplicationSourceSpecResticCapacity(value);
  }
  public static fromString(value: string): ReplicationSourceSpecResticCapacity {
    return new ReplicationSourceSpecResticCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
 *
 * @schema ReplicationSourceSpecResticCopyMethod
 */
export enum ReplicationSourceSpecResticCopyMethod {
  /** Direct */
  DIRECT = "Direct",
  /** None */
  NONE = "None",
  /** Clone */
  CLONE = "Clone",
  /** Snapshot */
  SNAPSHOT = "Snapshot",
}

/**
 * customCA is a custom CA that will be used to verify the remote
 *
 * @schema ReplicationSourceSpecResticCustomCa
 */
export interface ReplicationSourceSpecResticCustomCa {
  /**
   * The name of a ConfigMap that contains the custom CA certificate If ConfigMapName is used then SecretName should not be set
   *
   * @schema ReplicationSourceSpecResticCustomCa#configMapName
   */
  readonly configMapName?: string;

  /**
   * The key within the Secret or ConfigMap containing the CA certificate
   *
   * @schema ReplicationSourceSpecResticCustomCa#key
   */
  readonly key?: string;

  /**
   * The name of a Secret that contains the custom CA certificate If SecretName is used then ConfigMapName should not be set
   *
   * @schema ReplicationSourceSpecResticCustomCa#secretName
   */
  readonly secretName?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecResticCustomCa' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecResticCustomCa(
  obj: ReplicationSourceSpecResticCustomCa | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "configMapName": obj.configMapName,
    "key": obj.key,
    "secretName": obj.secretName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
 *
 * @schema ReplicationSourceSpecResticMoverSecurityContext
 */
export interface ReplicationSourceSpecResticMoverSecurityContext {
  /**
   * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
   * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
   * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContext#fsGroupChangePolicy
   */
  readonly fsGroupChangePolicy?: string;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @default user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   * @schema ReplicationSourceSpecResticMoverSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?:
    ReplicationSourceSpecResticMoverSecurityContextSeLinuxOptions;

  /**
   * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContext#seccompProfile
   */
  readonly seccompProfile?:
    ReplicationSourceSpecResticMoverSecurityContextSeccompProfile;

  /**
   * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContext#sysctls
   */
  readonly sysctls?: ReplicationSourceSpecResticMoverSecurityContextSysctls[];

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContext#windowsOptions
   */
  readonly windowsOptions?:
    ReplicationSourceSpecResticMoverSecurityContextWindowsOptions;
}

/**
 * Converts an object of type 'ReplicationSourceSpecResticMoverSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecResticMoverSecurityContext(
  obj: ReplicationSourceSpecResticMoverSecurityContext | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "fsGroup": obj.fsGroup,
    "fsGroupChangePolicy": obj.fsGroupChangePolicy,
    "runAsGroup": obj.runAsGroup,
    "runAsNonRoot": obj.runAsNonRoot,
    "runAsUser": obj.runAsUser,
    "seLinuxOptions":
      toJson_ReplicationSourceSpecResticMoverSecurityContextSeLinuxOptions(
        obj.seLinuxOptions,
      ),
    "seccompProfile":
      toJson_ReplicationSourceSpecResticMoverSecurityContextSeccompProfile(
        obj.seccompProfile,
      ),
    "supplementalGroups": obj.supplementalGroups?.map((y) => y),
    "sysctls": obj.sysctls?.map((y) =>
      toJson_ReplicationSourceSpecResticMoverSecurityContextSysctls(y)
    ),
    "windowsOptions":
      toJson_ReplicationSourceSpecResticMoverSecurityContextWindowsOptions(
        obj.windowsOptions,
      ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * ResticRetainPolicy define the retain policy
 *
 * @schema ReplicationSourceSpecResticRetain
 */
export interface ReplicationSourceSpecResticRetain {
  /**
   * Daily defines the number of snapshots to be kept daily
   *
   * @schema ReplicationSourceSpecResticRetain#daily
   */
  readonly daily?: number;

  /**
   * Hourly defines the number of snapshots to be kept hourly
   *
   * @schema ReplicationSourceSpecResticRetain#hourly
   */
  readonly hourly?: number;

  /**
   * Last defines the number of snapshots to be kept
   *
   * @schema ReplicationSourceSpecResticRetain#last
   */
  readonly last?: string;

  /**
   * Monthly defines the number of snapshots to be kept monthly
   *
   * @schema ReplicationSourceSpecResticRetain#monthly
   */
  readonly monthly?: number;

  /**
   * Weekly defines the number of snapshots to be kept weekly
   *
   * @schema ReplicationSourceSpecResticRetain#weekly
   */
  readonly weekly?: number;

  /**
   * Within defines the number of snapshots to be kept Within the given time period
   *
   * @schema ReplicationSourceSpecResticRetain#within
   */
  readonly within?: string;

  /**
   * Yearly defines the number of snapshots to be kept yearly
   *
   * @schema ReplicationSourceSpecResticRetain#yearly
   */
  readonly yearly?: number;
}

/**
 * Converts an object of type 'ReplicationSourceSpecResticRetain' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecResticRetain(
  obj: ReplicationSourceSpecResticRetain | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "daily": obj.daily,
    "hourly": obj.hourly,
    "last": obj.last,
    "monthly": obj.monthly,
    "weekly": obj.weekly,
    "within": obj.within,
    "yearly": obj.yearly,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * capacity can be used to override the capacity of the PiT image.
 *
 * @schema ReplicationSourceSpecRsyncCapacity
 */
export class ReplicationSourceSpecRsyncCapacity {
  public static fromNumber(value: number): ReplicationSourceSpecRsyncCapacity {
    return new ReplicationSourceSpecRsyncCapacity(value);
  }
  public static fromString(value: string): ReplicationSourceSpecRsyncCapacity {
    return new ReplicationSourceSpecRsyncCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
 *
 * @schema ReplicationSourceSpecRsyncCopyMethod
 */
export enum ReplicationSourceSpecRsyncCopyMethod {
  /** Direct */
  DIRECT = "Direct",
  /** None */
  NONE = "None",
  /** Clone */
  CLONE = "Clone",
  /** Snapshot */
  SNAPSHOT = "Snapshot",
}

/**
 * capacity can be used to override the capacity of the PiT image.
 *
 * @schema ReplicationSourceSpecRsyncTlsCapacity
 */
export class ReplicationSourceSpecRsyncTlsCapacity {
  public static fromNumber(
    value: number,
  ): ReplicationSourceSpecRsyncTlsCapacity {
    return new ReplicationSourceSpecRsyncTlsCapacity(value);
  }
  public static fromString(
    value: string,
  ): ReplicationSourceSpecRsyncTlsCapacity {
    return new ReplicationSourceSpecRsyncTlsCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * copyMethod describes how a point-in-time (PiT) image of the source volume should be created.
 *
 * @schema ReplicationSourceSpecRsyncTlsCopyMethod
 */
export enum ReplicationSourceSpecRsyncTlsCopyMethod {
  /** Direct */
  DIRECT = "Direct",
  /** None */
  NONE = "None",
  /** Clone */
  CLONE = "Clone",
  /** Snapshot */
  SNAPSHOT = "Snapshot",
}

/**
 * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
 *
 * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContext
 */
export interface ReplicationSourceSpecRsyncTlsMoverSecurityContext {
  /**
   * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
   * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
   * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContext#fsGroupChangePolicy
   */
  readonly fsGroupChangePolicy?: string;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @default user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?:
    ReplicationSourceSpecRsyncTlsMoverSecurityContextSeLinuxOptions;

  /**
   * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContext#seccompProfile
   */
  readonly seccompProfile?:
    ReplicationSourceSpecRsyncTlsMoverSecurityContextSeccompProfile;

  /**
   * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContext#sysctls
   */
  readonly sysctls?: ReplicationSourceSpecRsyncTlsMoverSecurityContextSysctls[];

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContext#windowsOptions
   */
  readonly windowsOptions?:
    ReplicationSourceSpecRsyncTlsMoverSecurityContextWindowsOptions;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRsyncTlsMoverSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRsyncTlsMoverSecurityContext(
  obj: ReplicationSourceSpecRsyncTlsMoverSecurityContext | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "fsGroup": obj.fsGroup,
    "fsGroupChangePolicy": obj.fsGroupChangePolicy,
    "runAsGroup": obj.runAsGroup,
    "runAsNonRoot": obj.runAsNonRoot,
    "runAsUser": obj.runAsUser,
    "seLinuxOptions":
      toJson_ReplicationSourceSpecRsyncTlsMoverSecurityContextSeLinuxOptions(
        obj.seLinuxOptions,
      ),
    "seccompProfile":
      toJson_ReplicationSourceSpecRsyncTlsMoverSecurityContextSeccompProfile(
        obj.seccompProfile,
      ),
    "supplementalGroups": obj.supplementalGroups?.map((y) => y),
    "sysctls": obj.sysctls?.map((y) =>
      toJson_ReplicationSourceSpecRsyncTlsMoverSecurityContextSysctls(y)
    ),
    "windowsOptions":
      toJson_ReplicationSourceSpecRsyncTlsMoverSecurityContextWindowsOptions(
        obj.windowsOptions,
      ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Used to set the size of the Syncthing config volume.
 *
 * @schema ReplicationSourceSpecSyncthingConfigCapacity
 */
export class ReplicationSourceSpecSyncthingConfigCapacity {
  public static fromNumber(
    value: number,
  ): ReplicationSourceSpecSyncthingConfigCapacity {
    return new ReplicationSourceSpecSyncthingConfigCapacity(value);
  }
  public static fromString(
    value: string,
  ): ReplicationSourceSpecSyncthingConfigCapacity {
    return new ReplicationSourceSpecSyncthingConfigCapacity(value);
  }
  private constructor(public readonly value: number | string) {
  }
}

/**
 * MoverSecurityContext allows specifying the PodSecurityContext that will be used by the data mover
 *
 * @schema ReplicationSourceSpecSyncthingMoverSecurityContext
 */
export interface ReplicationSourceSpecSyncthingMoverSecurityContext {
  /**
   * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
   * 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
   * If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContext#fsGroup
   */
  readonly fsGroup?: number;

  /**
   * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContext#fsGroupChangePolicy
   */
  readonly fsGroupChangePolicy?: string;

  /**
   * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContext#runAsGroup
   */
  readonly runAsGroup?: number;

  /**
   * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContext#runAsNonRoot
   */
  readonly runAsNonRoot?: boolean;

  /**
   * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @default user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContext#runAsUser
   */
  readonly runAsUser?: number;

  /**
   * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContext#seLinuxOptions
   */
  readonly seLinuxOptions?:
    ReplicationSourceSpecSyncthingMoverSecurityContextSeLinuxOptions;

  /**
   * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContext#seccompProfile
   */
  readonly seccompProfile?:
    ReplicationSourceSpecSyncthingMoverSecurityContextSeccompProfile;

  /**
   * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContext#supplementalGroups
   */
  readonly supplementalGroups?: number[];

  /**
   * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContext#sysctls
   */
  readonly sysctls?:
    ReplicationSourceSpecSyncthingMoverSecurityContextSysctls[];

  /**
   * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContext#windowsOptions
   */
  readonly windowsOptions?:
    ReplicationSourceSpecSyncthingMoverSecurityContextWindowsOptions;
}

/**
 * Converts an object of type 'ReplicationSourceSpecSyncthingMoverSecurityContext' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecSyncthingMoverSecurityContext(
  obj: ReplicationSourceSpecSyncthingMoverSecurityContext | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "fsGroup": obj.fsGroup,
    "fsGroupChangePolicy": obj.fsGroupChangePolicy,
    "runAsGroup": obj.runAsGroup,
    "runAsNonRoot": obj.runAsNonRoot,
    "runAsUser": obj.runAsUser,
    "seLinuxOptions":
      toJson_ReplicationSourceSpecSyncthingMoverSecurityContextSeLinuxOptions(
        obj.seLinuxOptions,
      ),
    "seccompProfile":
      toJson_ReplicationSourceSpecSyncthingMoverSecurityContextSeccompProfile(
        obj.seccompProfile,
      ),
    "supplementalGroups": obj.supplementalGroups?.map((y) => y),
    "sysctls": obj.sysctls?.map((y) =>
      toJson_ReplicationSourceSpecSyncthingMoverSecurityContextSysctls(y)
    ),
    "windowsOptions":
      toJson_ReplicationSourceSpecSyncthingMoverSecurityContextWindowsOptions(
        obj.windowsOptions,
      ),
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * SyncthingPeer Defines the necessary information needed by VolSync to configure a given peer with the running Syncthing instance.
 *
 * @schema ReplicationSourceSpecSyncthingPeers
 */
export interface ReplicationSourceSpecSyncthingPeers {
  /**
   * The peer's Syncthing ID.
   *
   * @schema ReplicationSourceSpecSyncthingPeers#ID
   */
  readonly id: string;

  /**
   * The peer's address that our Syncthing node will connect to.
   *
   * @schema ReplicationSourceSpecSyncthingPeers#address
   */
  readonly address: string;

  /**
   * A flag that determines whether this peer should introduce us to other peers sharing this volume. It is HIGHLY recommended that two Syncthing peers do NOT set each other as introducers as you will have a difficult time disconnecting the two.
   *
   * @schema ReplicationSourceSpecSyncthingPeers#introducer
   */
  readonly introducer: boolean;
}

/**
 * Converts an object of type 'ReplicationSourceSpecSyncthingPeers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecSyncthingPeers(
  obj: ReplicationSourceSpecSyncthingPeers | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "ID": obj.id,
    "address": obj.address,
    "introducer": obj.introducer,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationSourceSpecRcloneMoverSecurityContextSeLinuxOptions
 */
export interface ReplicationSourceSpecRcloneMoverSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRcloneMoverSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRcloneMoverSecurityContextSeLinuxOptions(
  obj:
    | ReplicationSourceSpecRcloneMoverSecurityContextSeLinuxOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "level": obj.level,
    "role": obj.role,
    "type": obj.type,
    "user": obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationSourceSpecRcloneMoverSecurityContextSeccompProfile
 */
export interface ReplicationSourceSpecRcloneMoverSecurityContextSeccompProfile {
  /**
   * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * type indicates which kind of seccomp profile will be applied. Valid options are:
   * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextSeccompProfile#type
   */
  readonly type: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRcloneMoverSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRcloneMoverSecurityContextSeccompProfile(
  obj:
    | ReplicationSourceSpecRcloneMoverSecurityContextSeccompProfile
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "localhostProfile": obj.localhostProfile,
    "type": obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sysctl defines a kernel parameter to be set
 *
 * @schema ReplicationSourceSpecRcloneMoverSecurityContextSysctls
 */
export interface ReplicationSourceSpecRcloneMoverSecurityContextSysctls {
  /**
   * Name of a property to set
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextSysctls#name
   */
  readonly name: string;

  /**
   * Value of a property to set
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextSysctls#value
   */
  readonly value: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRcloneMoverSecurityContextSysctls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRcloneMoverSecurityContextSysctls(
  obj: ReplicationSourceSpecRcloneMoverSecurityContextSysctls | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "name": obj.name,
    "value": obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
 *
 * @schema ReplicationSourceSpecRcloneMoverSecurityContextWindowsOptions
 */
export interface ReplicationSourceSpecRcloneMoverSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
   *
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema ReplicationSourceSpecRcloneMoverSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRcloneMoverSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRcloneMoverSecurityContextWindowsOptions(
  obj:
    | ReplicationSourceSpecRcloneMoverSecurityContextWindowsOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "gmsaCredentialSpec": obj.gmsaCredentialSpec,
    "gmsaCredentialSpecName": obj.gmsaCredentialSpecName,
    "hostProcess": obj.hostProcess,
    "runAsUserName": obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationSourceSpecResticMoverSecurityContextSeLinuxOptions
 */
export interface ReplicationSourceSpecResticMoverSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecResticMoverSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecResticMoverSecurityContextSeLinuxOptions(
  obj:
    | ReplicationSourceSpecResticMoverSecurityContextSeLinuxOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "level": obj.level,
    "role": obj.role,
    "type": obj.type,
    "user": obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationSourceSpecResticMoverSecurityContextSeccompProfile
 */
export interface ReplicationSourceSpecResticMoverSecurityContextSeccompProfile {
  /**
   * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * type indicates which kind of seccomp profile will be applied. Valid options are:
   * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContextSeccompProfile#type
   */
  readonly type: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecResticMoverSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecResticMoverSecurityContextSeccompProfile(
  obj:
    | ReplicationSourceSpecResticMoverSecurityContextSeccompProfile
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "localhostProfile": obj.localhostProfile,
    "type": obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sysctl defines a kernel parameter to be set
 *
 * @schema ReplicationSourceSpecResticMoverSecurityContextSysctls
 */
export interface ReplicationSourceSpecResticMoverSecurityContextSysctls {
  /**
   * Name of a property to set
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContextSysctls#name
   */
  readonly name: string;

  /**
   * Value of a property to set
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContextSysctls#value
   */
  readonly value: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecResticMoverSecurityContextSysctls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecResticMoverSecurityContextSysctls(
  obj: ReplicationSourceSpecResticMoverSecurityContextSysctls | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "name": obj.name,
    "value": obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
 *
 * @schema ReplicationSourceSpecResticMoverSecurityContextWindowsOptions
 */
export interface ReplicationSourceSpecResticMoverSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
   *
   * @schema ReplicationSourceSpecResticMoverSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema ReplicationSourceSpecResticMoverSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecResticMoverSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecResticMoverSecurityContextWindowsOptions(
  obj:
    | ReplicationSourceSpecResticMoverSecurityContextWindowsOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "gmsaCredentialSpec": obj.gmsaCredentialSpec,
    "gmsaCredentialSpecName": obj.gmsaCredentialSpecName,
    "hostProcess": obj.hostProcess,
    "runAsUserName": obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextSeLinuxOptions
 */
export interface ReplicationSourceSpecRsyncTlsMoverSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRsyncTlsMoverSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRsyncTlsMoverSecurityContextSeLinuxOptions(
  obj:
    | ReplicationSourceSpecRsyncTlsMoverSecurityContextSeLinuxOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "level": obj.level,
    "role": obj.role,
    "type": obj.type,
    "user": obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextSeccompProfile
 */
export interface ReplicationSourceSpecRsyncTlsMoverSecurityContextSeccompProfile {
  /**
   * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * type indicates which kind of seccomp profile will be applied. Valid options are:
   * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextSeccompProfile#type
   */
  readonly type: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRsyncTlsMoverSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRsyncTlsMoverSecurityContextSeccompProfile(
  obj:
    | ReplicationSourceSpecRsyncTlsMoverSecurityContextSeccompProfile
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "localhostProfile": obj.localhostProfile,
    "type": obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sysctl defines a kernel parameter to be set
 *
 * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextSysctls
 */
export interface ReplicationSourceSpecRsyncTlsMoverSecurityContextSysctls {
  /**
   * Name of a property to set
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextSysctls#name
   */
  readonly name: string;

  /**
   * Value of a property to set
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextSysctls#value
   */
  readonly value: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRsyncTlsMoverSecurityContextSysctls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRsyncTlsMoverSecurityContextSysctls(
  obj: ReplicationSourceSpecRsyncTlsMoverSecurityContextSysctls | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "name": obj.name,
    "value": obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
 *
 * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextWindowsOptions
 */
export interface ReplicationSourceSpecRsyncTlsMoverSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
   *
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema ReplicationSourceSpecRsyncTlsMoverSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecRsyncTlsMoverSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecRsyncTlsMoverSecurityContextWindowsOptions(
  obj:
    | ReplicationSourceSpecRsyncTlsMoverSecurityContextWindowsOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "gmsaCredentialSpec": obj.gmsaCredentialSpec,
    "gmsaCredentialSpecName": obj.gmsaCredentialSpecName,
    "hostProcess": obj.hostProcess,
    "runAsUserName": obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationSourceSpecSyncthingMoverSecurityContextSeLinuxOptions
 */
export interface ReplicationSourceSpecSyncthingMoverSecurityContextSeLinuxOptions {
  /**
   * Level is SELinux level label that applies to the container.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextSeLinuxOptions#level
   */
  readonly level?: string;

  /**
   * Role is a SELinux role label that applies to the container.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextSeLinuxOptions#role
   */
  readonly role?: string;

  /**
   * Type is a SELinux type label that applies to the container.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextSeLinuxOptions#type
   */
  readonly type?: string;

  /**
   * User is a SELinux user label that applies to the container.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextSeLinuxOptions#user
   */
  readonly user?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecSyncthingMoverSecurityContextSeLinuxOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecSyncthingMoverSecurityContextSeLinuxOptions(
  obj:
    | ReplicationSourceSpecSyncthingMoverSecurityContextSeLinuxOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "level": obj.level,
    "role": obj.role,
    "type": obj.type,
    "user": obj.user,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
 *
 * @schema ReplicationSourceSpecSyncthingMoverSecurityContextSeccompProfile
 */
export interface ReplicationSourceSpecSyncthingMoverSecurityContextSeccompProfile {
  /**
   * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is "Localhost". Must NOT be set for any other type.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextSeccompProfile#localhostProfile
   */
  readonly localhostProfile?: string;

  /**
   * type indicates which kind of seccomp profile will be applied. Valid options are:
   * Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextSeccompProfile#type
   */
  readonly type: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecSyncthingMoverSecurityContextSeccompProfile' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecSyncthingMoverSecurityContextSeccompProfile(
  obj:
    | ReplicationSourceSpecSyncthingMoverSecurityContextSeccompProfile
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "localhostProfile": obj.localhostProfile,
    "type": obj.type,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * Sysctl defines a kernel parameter to be set
 *
 * @schema ReplicationSourceSpecSyncthingMoverSecurityContextSysctls
 */
export interface ReplicationSourceSpecSyncthingMoverSecurityContextSysctls {
  /**
   * Name of a property to set
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextSysctls#name
   */
  readonly name: string;

  /**
   * Value of a property to set
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextSysctls#value
   */
  readonly value: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecSyncthingMoverSecurityContextSysctls' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecSyncthingMoverSecurityContextSysctls(
  obj: ReplicationSourceSpecSyncthingMoverSecurityContextSysctls | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "name": obj.name,
    "value": obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */

/**
 * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
 *
 * @schema ReplicationSourceSpecSyncthingMoverSecurityContextWindowsOptions
 */
export interface ReplicationSourceSpecSyncthingMoverSecurityContextWindowsOptions {
  /**
   * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextWindowsOptions#gmsaCredentialSpec
   */
  readonly gmsaCredentialSpec?: string;

  /**
   * GMSACredentialSpecName is the name of the GMSA credential spec to use.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextWindowsOptions#gmsaCredentialSpecName
   */
  readonly gmsaCredentialSpecName?: string;

  /**
   * HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.
   *
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextWindowsOptions#hostProcess
   */
  readonly hostProcess?: boolean;

  /**
   * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   *
   * @default the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
   * @schema ReplicationSourceSpecSyncthingMoverSecurityContextWindowsOptions#runAsUserName
   */
  readonly runAsUserName?: string;
}

/**
 * Converts an object of type 'ReplicationSourceSpecSyncthingMoverSecurityContextWindowsOptions' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ReplicationSourceSpecSyncthingMoverSecurityContextWindowsOptions(
  obj:
    | ReplicationSourceSpecSyncthingMoverSecurityContextWindowsOptions
    | undefined,
): Record<string, any> | undefined {
  if (obj === undefined) return undefined;
  const result = {
    "gmsaCredentialSpec": obj.gmsaCredentialSpec,
    "gmsaCredentialSpecName": obj.gmsaCredentialSpecName,
    "hostProcess": obj.hostProcess,
    "runAsUserName": obj.runAsUserName,
  };
  // filter undefined values
  return Object.entries(result).reduce(
    (r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }),
    {},
  );
}
/* eslint-enable max-len, quote-props */
