apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: default
  namespace: argocd
spec:
  clusterResourceWhitelist:
    - group: "*"
      kind: "*"
  destinations:
    - namespace: "*"
      server: "*"
  orphanedResources:
    warn: true
  sourceRepos:
    - "*"
---
apiVersion: node.k8s.io/v1
kind: RuntimeClass
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: nvidia
  namespace: turing
handler: nvidia
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: longhorn-ssd
  namespace: turing
parameters:
  diskSelector: ssd
  nodeSelector: ""
  numberOfReplicas: "1"
  recurringJobSelector: '[{"name":"turing-longhorn-recurring-job","isGroup":false}]'
  staleReplicaTimeout: "480"
provisioner: driver.longhorn.io
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: longhorn-hdd
  namespace: turing
parameters:
  diskSelector: hdd
  numberOfReplicas: "1"
  staleReplicaTimeout: "480"
provisioner: driver.longhorn.io
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: 1password
  namespace: argocd
spec:
  destination:
    namespace: 1password
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: connect
    helm:
      parameters:
        - name: operator.autoRestart
          value: "true"
        - name: operator.create
          value: "true"
        - name: operator.pollingInterval
          value: "60"
    repoURL: https://1password.github.io/connect-helm-charts/
    targetRevision: 1.14.0
  syncPolicy:
    automated: {}
    syncOptions:
      - CreateNamespace=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: argocd
  namespace: argocd
spec:
  destination:
    namespace: argocd
    server: https://kubernetes.default.svc
  project: default
  source:
    path: manifests/
    repoURL: https://github.com/argoproj/argo-cd
    targetRevision: stable
  syncPolicy:
    automated: {}
    syncOptions:
      - CreateNamespace=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: datadog
  namespace: argocd
spec:
  destination:
    namespace: datadog
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: datadog-operator
    repoURL: https://helm.datadoghq.com
    targetRevision: 1.4.1
  syncPolicy:
    automated: {}
    syncOptions:
      - CreateNamespace=true
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-datadog-secret
  namespace: datadog
spec:
  itemPath: vaults/v64ocnykdqju4ui6j6pua56xw4/items/jn4difq4yuehvaif6va3zxrvle
---
apiVersion: datadoghq.com/v2alpha1
kind: DatadogAgent
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-datadog-agent
  namespace: turing
spec:
  global:
    credentials:
      apiSecret:
        keyName: api-key
        secretName: turing-datadog-secret
      appSecret:
        keyName: app-key
        secretName: turing-datadog-secret
    site: datadoghq.com
  override:
    clusterAgent:
      image:
        name: gcr.io/datadoghq/cluster-agent:latest
    nodeAgent:
      image:
        name: gcr.io/datadoghq/agent:latest
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: aws-secret
  namespace: longhorn
spec:
  itemPath: vaults/v64ocnykdqju4ui6j6pua56xw4/items/47zgh2s2tj4ite3gujflgqiwsq
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: longhorn
  namespace: argocd
spec:
  destination:
    namespace: longhorn
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: longhorn
    helm:
      parameters:
        - name: helmPreUpgradeCheckerJob.enabled
          value: "false"
        - name: persistence.defaultClassReplicaCount
          value: "1"
        - name: defaultSettings.backupTarget
          value: s3://longhorn-backup@auto/
        - name: defaultSettings.backupTargetCredentialSecret
          value: aws-secret
    repoURL: https://charts.longhorn.io
    targetRevision: 1.6.0
  syncPolicy:
    automated: {}
    syncOptions:
      - CreateNamespace=true
---
apiVersion: longhorn.io/v1beta2
kind: RecurringJob
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-longhorn-recurring-job
  namespace: longhorn
spec:
  concurrency: 4
  cron: 0 0 * * *
  labels: {}
  name: longhorn-recurring-job
  retain: 3
  task: backup
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: operator-oauth
  namespace: tailscale
spec:
  itemPath: vaults/v64ocnykdqju4ui6j6pua56xw4/items/mboftvs4fyptyqvg3anrfjy6vu
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: tailscale
  namespace: argocd
spec:
  destination:
    namespace: tailscale
    server: https://kubernetes.default.svc
  project: default
  source:
    path: cmd/k8s-operator/deploy/chart
    repoURL: https://github.com/tailscale/tailscale
    targetRevision: HEAD
  syncPolicy:
    automated: {}
    syncOptions:
      - CreateNamespace=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing
  namespace: argocd
spec:
  destination:
    namespace: turing
    server: https://kubernetes.default.svc
  project: default
  source:
    path: cdk8s/dist/
    repoURL: https://github.com/shepherdjerred/servers
    targetRevision: main
  syncPolicy:
    automated: {}
    syncOptions:
      - CreateNamespace=true
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: immich-volume
  namespace: immich
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: longhorn-hdd
  volumeMode: Filesystem
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: immich
  namespace: argocd
spec:
  destination:
    namespace: immich
    server: https://kubernetes.default.svc
  project: default
  source:
    helm:
      parameters:
        - name: postgresql.enabled
          value: "true"
        - name: redis.enabled
          value: "true"
        - name: immich.persistence.library.existingClaim
          value: immich-volume
    path: charts/immich
    repoURL: https://github.com/immich-app/immich-charts/
    targetRevision: immich-0.3.1
  syncPolicy:
    automated: {}
    syncOptions:
      - CreateNamespace=true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-esphome
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-esphome-c82c7ff4
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-esphome-c82c7ff4
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
          image: esphome/esphome
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 6052
              name: port-6052-web
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          volumeMounts:
            - mountPath: /config
              name: pvc-esphome-pvc-longhorn
      dnsPolicy: ClusterFirst
      hostNetwork: true
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-esphome-pvc-longhorn
          persistentVolumeClaim:
            claimName: esphome-pvc-longhorn
            readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: esphome-pvc-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-esphome-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 6052
  selector:
    cdk8s.io/metadata.addr: turing-esphome-c82c7ff4
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    tailscale.com/funnel: "true"
  labels:
    app.kubernetes.io/instance: turing
  name: turing-esphome-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-esphome-service
      port:
        number: 6052
  ingressClassName: tailscale
  tls:
    - hosts:
        - esphome
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-bazarr
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-bazarr-c802be67
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-bazarr-c802be67
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: ""
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          image: lscr.io/linuxserver/bazarr
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 6767
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 6767
          volumeMounts:
            - mountPath: /config
              name: pvc-bazarr-longhorn
            - mountPath: /movies
              name: bazarr-movies-bind-mount
            - mountPath: /tv
              name: bazarr-tv-bind-mount
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-bazarr-longhorn
          persistentVolumeClaim:
            claimName: bazarr-longhorn
            readOnly: false
        - hostPath:
            path: /mnt/storage/media/movies
            type: ""
          name: bazarr-movies-bind-mount
        - hostPath:
            path: /mnt/storage/media/tv
            type: ""
          name: bazarr-tv-bind-mount
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: bazarr-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-bazarr-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 6767
  selector:
    cdk8s.io/metadata.addr: turing-bazarr-c802be67
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-bazarr-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-bazarr-service
      port:
        number: 6767
  ingressClassName: tailscale
  tls:
    - hosts:
        - bazarr
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-tautulli
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-tautulli-c8df029b
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-tautulli-c8df029b
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          image: lscr.io/linuxserver/tautulli
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 8181
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 8181
          volumeMounts:
            - mountPath: /config
              name: pvc-tautulli-longhorn
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-tautulli-longhorn
          persistentVolumeClaim:
            claimName: tautulli-longhorn
            readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: tautulli-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-tautulli-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 8181
  selector:
    cdk8s.io/metadata.addr: turing-tautulli-c8df029b
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-tautulli-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-tautulli-service
      port:
        number: 8181
  ingressClassName: tailscale
  tls:
    - hosts:
        - tautulli
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: invidious-postgres-onepassword
  namespace: turing
spec:
  itemPath: vaults/v64ocnykdqju4ui6j6pua56xw4/items/l7quccusjzdh4ww5rhutqpaf2m
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-invidious-postgres-deployment
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-invidious-postgres-deployment-c8cf5dfb
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-invidious-postgres-deployment-c8cf5dfb
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: invidious-postgres-onepassword
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_DB
              value: invidious
          image: postgres
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 5432
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: pvc-invidious-postgres-longhorn
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-invidious-postgres-longhorn
          persistentVolumeClaim:
            claimName: invidious-postgres-longhorn
            readOnly: false
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-invidious-postgres-deployment-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    cdk8s.io/metadata.addr: turing-invidious-postgres-deployment-c8cf5dfb
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: invidious-postgres-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-invidious
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-invidious-c8ca4b09
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-invidious-c8ca4b09
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
          image: quay.io/invidious/invidious
          imagePullPolicy: Always
          name: invidious
          ports:
            - containerPort: 3000
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 3000
          volumeMounts:
            - mountPath: /invidious/config/config.yml
              name: configmap-turing-invidious-conf
              subPath: config.yml
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            items:
              - key: config.yml
                path: config.yml
            name: turing-invidious-conf
          name: configmap-turing-invidious-conf
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-invidious-conf
  namespace: turing
data:
  nitter.conf: |
    db:
      dbname: invidious
      user: postgres
      # not exposed to outside of the cluster, so this should be OK
      # ideally this should be a secret
      password: "orJ.U8QskAB3szvUK-8*"
      host: "turing-invidious-postgres-deployment-service"
      port: 5432
    check_tables: true
    hmac_key: "f.3_RvweD9yDyxnfvgfA
immutable: false
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-invidious-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 3000
  selector:
    cdk8s.io/metadata.addr: turing-invidious-c8ca4b09
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-invidious-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-invidious-service
      port:
        number: 3000
  ingressClassName: tailscale
  tls:
    - hosts:
        - invidious
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-teddis-redis-deployment
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-teddis-redis-deployment-c8d1ca5d
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-teddis-redis-deployment-c8d1ca5d
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
          image: redis
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 6379
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 999
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 6379
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-teddis-redis-deployment-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    cdk8s.io/metadata.addr: turing-teddis-redis-deployment-c8d1ca5d
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-teddit
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-teddit-c85c9da1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-teddit-c85c9da1
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: REDIS_HOST
              value: turing-teddis-redis-deployment-service
            - name: DOMAIN
              value: teddit.tailnet-1a49.ts.net
          image: teddit/teddit
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 8080
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 8080
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-teddit-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 8080
  selector:
    cdk8s.io/metadata.addr: turing-teddit-c85c9da1
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-teddit-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-teddit-service
      port:
        number: 8080
  ingressClassName: tailscale
  tls:
    - hosts:
        - teddit
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-plex
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-plex-c8e0eac9
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-plex-c8e0eac9
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: ADVERTISE_IP
              value: https://plex.tailnet-1a49.ts.net
            - name: NVIDIA_DRIVER_CAPABILITIES
              value: all
            - name: NVIDIA_VISIBLE_DEVICES
              value: all
          image: plexinc/pms-docker
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 32400
              hostIP: 0.0.0.0
              hostPort: 32400
              name: port-32400-web
              protocol: TCP
            - containerPort: 1900
              hostPort: 1900
              name: port-1900-dlna
              protocol: UDP
            - containerPort: 5353
              hostPort: 5353
              name: port-5353
              protocol: UDP
            - containerPort: 3005
              hostPort: 3005
              name: port-3005
              protocol: TCP
            - containerPort: 8324
              hostPort: 8324
              name: port-8324-roku
              protocol: TCP
            - containerPort: 32469
              hostPort: 32469
              name: port-32469-dlna
              protocol: TCP
            - containerPort: 32410
              hostPort: 32410
              name: port-32410-gdm
              protocol: UDP
            - containerPort: 32412
              hostPort: 32412
              name: port-32412-gdm
              protocol: UDP
            - containerPort: 32413
              hostPort: 32413
              name: port-32413-gdm
              protocol: UDP
            - containerPort: 32414
              hostPort: 32414
              name: port-32414-gdm
              protocol: UDP
          securityContext:
            allowPrivilegeEscalation: true
            privileged: true
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          volumeMounts:
            - mountPath: /config
              name: pvc-plex-pvc-longhorn
            - mountPath: /data/tv
              name: plex-tv-bind-mount
            - mountPath: /data/movies
              name: plex-movies-bind-mount
            - mountPath: /data/other
              name: plex-other-bind-mount
            - mountPath: /data/music
              name: plex-music-bind-mount
            - mountPath: /transcode
              name: plex-shm-mount
            - mountPath: /dev/dvb
              name: plex-dev-dvb-bind-mount
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      runtimeClassName: nvidia
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-plex-pvc-longhorn
          persistentVolumeClaim:
            claimName: plex-pvc-longhorn
            readOnly: false
        - hostPath:
            path: /mnt/storage/media/tv
            type: ""
          name: plex-tv-bind-mount
        - hostPath:
            path: /mnt/storage/media/movies
            type: ""
          name: plex-movies-bind-mount
        - hostPath:
            path: /mnt/storage/media/other
            type: ""
          name: plex-other-bind-mount
        - hostPath:
            path: /mnt/storage/media/music
            type: ""
          name: plex-music-bind-mount
        - emptyDir:
            medium: Memory
            sizeLimit: 8192Mi
          name: plex-shm-mount
        - hostPath:
            path: /dev/dvb
            type: ""
          name: plex-dev-dvb-bind-mount
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: plex-pvc-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-plex-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 32400
  selector:
    cdk8s.io/metadata.addr: turing-plex-c8e0eac9
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    tailscale.com/funnel: "true"
  labels:
    app.kubernetes.io/instance: turing
  name: turing-plex-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-plex-service
      port:
        number: 32400
  ingressClassName: tailscale
  tls:
    - hosts:
        - plex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-radarr
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-radarr-c889326d
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-radarr-c889326d
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          image: lscr.io/linuxserver/radarr
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 7878
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 7878
          volumeMounts:
            - mountPath: /config
              name: pvc-radarr-longhorn
            - mountPath: /downloads
              name: radarr-torrents-bind-mount
            - mountPath: /movies
              name: radarr-movies-bind-mount
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-radarr-longhorn
          persistentVolumeClaim:
            claimName: radarr-longhorn
            readOnly: false
        - hostPath:
            path: /mnt/storage/downloads/torrents
            type: ""
          name: radarr-torrents-bind-mount
        - hostPath:
            path: /mnt/storage/media/movies
            type: ""
          name: radarr-movies-bind-mount
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: radarr-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-radarr-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 7878
  selector:
    cdk8s.io/metadata.addr: turing-radarr-c889326d
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-radarr-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-radarr-service
      port:
        number: 7878
  ingressClassName: tailscale
  tls:
    - hosts:
        - radarr
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-homeassistant
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-homeassistant-c8dec317
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-homeassistant-c8dec317
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
          image: ghcr.io/home-assistant/home-assistant:stable
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 8123
              name: port-8123-web
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          volumeMounts:
            - mountPath: /config
              name: pvc-homeassistant-pvc-longhorn
      dnsPolicy: ClusterFirst
      hostNetwork: true
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-homeassistant-pvc-longhorn
          persistentVolumeClaim:
            claimName: homeassistant-pvc-longhorn
            readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: homeassistant-pvc-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-homeassistant-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 8123
  selector:
    cdk8s.io/metadata.addr: turing-homeassistant-c8dec317
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    tailscale.com/funnel: "true"
  labels:
    app.kubernetes.io/instance: turing
  name: turing-homeassistant-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-homeassistant-service
      port:
        number: 8123
  ingressClassName: tailscale
  tls:
    - hosts:
        - homeassistant
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-nitter-redis-deployment
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-nitter-redis-deployment-c86eb1e7
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-nitter-redis-deployment-c86eb1e7
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
          image: redis
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 6379
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 999
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 6379
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-nitter-redis-deployment-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    cdk8s.io/metadata.addr: turing-nitter-redis-deployment-c86eb1e7
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-nitter
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-nitter-c8547ba1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-nitter-c8547ba1
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
          image: zedeus/nitter
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 8080
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 8080
          volumeMounts:
            - mountPath: /src/nitter.conf
              name: configmap-turing-nitter-conf
              subPath: nitter.conf
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsGroup: 999
        runAsNonRoot: true
        runAsUser: 999
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            items:
              - key: nitter.conf
                path: nitter.conf
            name: turing-nitter-conf
          name: configmap-turing-nitter-conf
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-nitter-conf
  namespace: turing
data:
  nitter.conf: |
    [Server]
    address = "0.0.0.0"
    port = 8080
    https = false  # disable to enable cookies when not using https
    httpMaxConnections = 100
    staticDir = "./public"
    title = "nitter"
    hostname = "nitter.tailnet-1a49.ts.net"

    [Cache]
    listMinutes = 240  # how long to cache list info (not the tweets, so keep it high)
    rssMinutes = 10  # how long to cache rss queries
    redisHost = "turing-nitter-redis-deployment-service"  # Change to "nitter-redis" if using docker-compose
    redisPort = 6379
    redisPassword = ""
    redisConnections = 20  # connection pool size
    redisMaxConnections = 30
    # max, new connections are opened when none are available, but if the pool size
    # goes above this, they're closed when released. don't worry about this unless
    # you receive tons of requests per second

    [Config]
    # TODO: replace with gomplate
    hmacKey = "vwr5hpc.ATE-puw-tuw"  # random key for cryptographic signing of video urls
    base64Media = false  # use base64 encoding for proxied media urls
    enableRSS = true  # set this to false to disable RSS feeds
    enableDebug = false  # enable request logs and debug endpoints
    proxy = ""  # http/https url, SOCKS proxies are not supported
    proxyAuth = ""
    tokenCount = 10
    # minimum amount of usable tokens. tokens are used to authorize API requests,
    # but they expire after ~1 hour, and have a limit of 187 requests.
    # the limit gets reset every 15 minutes, and the pool is filled up so there's
    # always at least $tokenCount usable tokens. again, only increase this if
    # you receive major bursts all the time

    # Change default preferences here, see src/prefs_impl.nim for a complete list
    [Preferences]
    theme = "Nitter"
    replaceTwitter = "go/nitter"
    replaceYouTube = ""
    replaceReddit = "go/teddit"
    replaceInstagram = ""
    proxyVideos = true
    hlsPlayback = false
    infiniteScroll = false
immutable: false
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-nitter-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 8080
  selector:
    cdk8s.io/metadata.addr: turing-nitter-c8547ba1
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-nitter-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-nitter-service
      port:
        number: 8080
  ingressClassName: tailscale
  tls:
    - hosts:
        - nitter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-overseerr
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-overseerr-c8da0376
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-overseerr-c8da0376
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          image: lscr.io/linuxserver/overseerr
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 5055
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 5055
          volumeMounts:
            - mountPath: /config
              name: pvc-overseerr-longhorn
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-overseerr-longhorn
          persistentVolumeClaim:
            claimName: overseerr-longhorn
            readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: overseerr-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-overseerr-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 5055
  selector:
    cdk8s.io/metadata.addr: turing-overseerr-c8da0376
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    tailscale.com/funnel: "true"
  labels:
    app.kubernetes.io/instance: turing
  name: turing-overseerr-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-overseerr-service
      port:
        number: 5055
  ingressClassName: tailscale
  tls:
    - hosts:
        - overseerr
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-mullvad
  namespace: turing
spec:
  itemPath: vaults/v64ocnykdqju4ui6j6pua56xw4/items/74rqjncejp7rpgelymnmul5ssm
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-qbittorrent
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-qbittorrent-c8390277
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-qbittorrent-c8390277
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: VPN_SERVICE_PROVIDER
              value: airvpn
            - name: VPN_TYPE
              value: wireguard
            - name: WIREGUARD_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  key: private-key
                  name: turing-mullvad
            - name: WIREGUARD_PRESHARED_KEY
              valueFrom:
                secretKeyRef:
                  key: preshared-key
                  name: turing-mullvad
            - name: WIREGUARD_ADDRESSES
              value: 10.154.174.240/32,fd7d:76ee:e68f:a993:af57:e79c:b39d:9dde/128
            - name: FIREWALL_VPN_INPUT_PORTS
              value: "16793"
          image: ghcr.io/qdm12/gluetun
          imagePullPolicy: Always
          name: gluetun
          securityContext:
            allowPrivilegeEscalation: true
            privileged: true
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          volumeMounts:
            - mountPath: /gluetun
              name: pvc-qbittorrent-gluetun-longhorn
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          image: lscr.io/linuxserver/qbittorrent
          imagePullPolicy: Always
          name: qbittorrent
          ports:
            - containerPort: 8080
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 8080
          volumeMounts:
            - mountPath: /config
              name: pvc-qbittorrent-longhorn
            - mountPath: /downloads
              name: qbittorrent-bind-mount
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-qbittorrent-gluetun-longhorn
          persistentVolumeClaim:
            claimName: qbittorrent-gluetun-longhorn
            readOnly: false
        - name: pvc-qbittorrent-longhorn
          persistentVolumeClaim:
            claimName: qbittorrent-longhorn
            readOnly: false
        - hostPath:
            path: /mnt/storage/downloads/torrents
            type: ""
          name: qbittorrent-bind-mount
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: qbittorrent-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: qbittorrent-gluetun-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    metallb.universe.tf/allow-shared-ip: gluetun
  labels:
    app.kubernetes.io/instance: turing
  name: turing-qbittorrent-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 8080
  selector:
    cdk8s.io/metadata.addr: turing-qbittorrent-c8390277
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-qbittorrent-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-qbittorrent-service
      port:
        number: 8080
  ingressClassName: tailscale
  tls:
    - hosts:
        - qbittorrent
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-sonarr
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-sonarr-c8f9699c
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-sonarr-c8f9699c
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          image: lscr.io/linuxserver/sonarr
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 8989
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 8989
          volumeMounts:
            - mountPath: /config
              name: pvc-sonarr-longhorn
            - mountPath: /downloads
              name: sonarr-torrents-bind-mount
            - mountPath: /tv
              name: sonarr-tv-bind-mount
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-sonarr-longhorn
          persistentVolumeClaim:
            claimName: sonarr-longhorn
            readOnly: false
        - hostPath:
            path: /mnt/storage/downloads/torrents
            type: ""
          name: sonarr-torrents-bind-mount
        - hostPath:
            path: /mnt/storage/media/tv
            type: ""
          name: sonarr-tv-bind-mount
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: sonarr-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-sonarr-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 8989
  selector:
    cdk8s.io/metadata.addr: turing-sonarr-c8f9699c
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-sonarr-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-sonarr-service
      port:
        number: 8989
  ingressClassName: tailscale
  tls:
    - hosts:
        - sonarr
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-syncthing
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-syncthing-c84725cd
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-syncthing-c84725cd
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          image: lscr.io/linuxserver/syncthing
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 8384
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 8384
          volumeMounts:
            - mountPath: /config
              name: pvc-syncthing-longhorn
            - mountPath: /sync
              name: pvc-syncthing-data-longhorn
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-syncthing-longhorn
          persistentVolumeClaim:
            claimName: syncthing-longhorn
            readOnly: false
        - name: pvc-syncthing-data-longhorn
          persistentVolumeClaim:
            claimName: syncthing-data-longhorn
            readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: syncthing-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: syncthing-data-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 40Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-syncthing-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 8384
  selector:
    cdk8s.io/metadata.addr: turing-syncthing-c84725cd
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-syncthing-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-syncthing-service
      port:
        number: 8384
  ingressClassName: tailscale
  tls:
    - hosts:
        - syncthing
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-golink
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-golink-c8ad5c7c
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-golink-c8ad5c7c
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: TS_AUTH_KEY
              valueFrom:
                secretKeyRef:
                  key: credential
                  name: tailscale-auth-key
          image: ghcr.io/tailscale/golink:main
          imagePullPolicy: Always
          name: main
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          volumeMounts:
            - mountPath: /home/nonroot
              name: pvc-golink-pvc-longhorn
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroup: 65532
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-golink-pvc-longhorn
          persistentVolumeClaim:
            claimName: golink-pvc-longhorn
            readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: golink-pvc-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: tailscale-auth-key
  namespace: turing
spec:
  itemPath: vaults/v64ocnykdqju4ui6j6pua56xw4/items/t5scpnlhnxvu25dneg6jdd7c7q
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: tmdb-api-key
  namespace: turing
spec:
  itemPath: vaults/v64ocnykdqju4ui6j6pua56xw4/items/z5a3jfyku5hvfxjzmvzm4ma3b4
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-bitmagnet-redis-deployment
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-bitmagnet-redis-deployment-c81582cd
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-bitmagnet-redis-deployment-c81582cd
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
          image: redis
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 6379
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 999
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 6379
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-bitmagnet-redis-deployment-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    cdk8s.io/metadata.addr: turing-bitmagnet-redis-deployment-c81582cd
  type: ClusterIP
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: bitmagnet-postgres-onepassword
  namespace: turing
spec:
  itemPath: vaults/v64ocnykdqju4ui6j6pua56xw4/items/3fznikxjqt4szpz3ngdv462m6m
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-bitmagnet-postgres-deployment
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-bitmagnet-postgres-deployment-c88c7f8b
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-bitmagnet-postgres-deployment-c88c7f8b
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: bitmagnet-postgres-onepassword
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_DB
              value: bitmagnet
          image: postgres
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 5432
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: pvc-bitmagnet-postgres-longhorn
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-bitmagnet-postgres-longhorn
          persistentVolumeClaim:
            claimName: bitmagnet-postgres-longhorn
            readOnly: false
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-bitmagnet-postgres-deployment-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    cdk8s.io/metadata.addr: turing-bitmagnet-postgres-deployment-c88c7f8b
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: bitmagnet-postgres-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
  storageClassName: longhorn-hdd
  volumeMode: Filesystem
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-bitmagnet
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-bitmagnet-c80fe8d5
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-bitmagnet-c80fe8d5
    spec:
      automountServiceAccountToken: false
      containers:
        - command:
            - bitmagnet
            - worker
            - run
            - --keys=http_server
            - --keys=queue_server
            - --keys=dht_crawler
          env:
            - name: TZ
              value: America/Los_Angeles
            - name: POSTGRES_HOST
              value: turing-bitmagnet-postgres-deployment-service
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: bitmagnet-postgres-onepassword
            - name: REDIS_ADDR
              value: turing-bitmagnet-redis-deployment-service:6379
            - name: TMDB_API_KEY
              valueFrom:
                secretKeyRef:
                  key: api-key
                  name: tmdb-api-key
          image: ghcr.io/bitmagnet-io/bitmagnet:latest
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 3333
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 3333
          volumeMounts:
            - mountPath: /app
              name: pvc-bitmagnet-longhorn
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-bitmagnet-longhorn
          persistentVolumeClaim:
            claimName: bitmagnet-longhorn
            readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: bitmagnet-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-bitmagnet-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 3333
  selector:
    cdk8s.io/metadata.addr: turing-bitmagnet-c80fe8d5
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-bitmagnet-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-bitmagnet-service
      port:
        number: 3333
  ingressClassName: tailscale
  tls:
    - hosts:
        - bitmagnet
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-prowlarr
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-prowlarr-c860cf1e
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-prowlarr-c860cf1e
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
          image: lscr.io/linuxserver/prowlarr
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 9696
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsGroup: 0
            runAsNonRoot: false
            runAsUser: 0
          startupProbe:
            failureThreshold: 3
            tcpSocket:
              port: 9696
          volumeMounts:
            - mountPath: /config
              name: pvc-prowlarr-longhorn
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-prowlarr-longhorn
          persistentVolumeClaim:
            claimName: prowlarr-longhorn
            readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: prowlarr-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-prowlarr-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - port: 9696
  selector:
    cdk8s.io/metadata.addr: turing-prowlarr-c860cf1e
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-prowlarr-tailscale-ingress-ingress
  namespace: turing
spec:
  defaultBackend:
    service:
      name: turing-prowlarr-service
      port:
        number: 9696
  ingressClassName: tailscale
  tls:
    - hosts:
        - prowlarr
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-palworld
  namespace: turing
spec:
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 0
  selector:
    matchLabels:
      cdk8s.io/metadata.addr: turing-palworld-c89e0183
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        cdk8s.io/metadata.addr: turing-palworld-c89e0183
    spec:
      automountServiceAccountToken: false
      containers:
        - env:
            - name: TZ
              value: America/Los_Angeles
            - name: PORT
              value: "8211"
            - name: PLAYERS
              value: "16"
            - name: SERVER_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: turing-palworld-item
            - name: MULTITHREADING
              value: "true"
            - name: RCON_ENABLED
              value: "true"
            - name: RCON_PORT
              value: "27015"
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: rcon-password
                  name: turing-palworld-item
            - name: COMMUNITY
              value: "false"
            - name: SERVER_NAME
              value: glitter
            - name: SERVER_DESCRIPTION
              value: whats up guys
            - name: DEATH_PENALTY
              value: ItemAndEquipment
            - name: BACKUP_ENABLED
              value: "false"
            - name: PAL_EGG_DEFAULT_HATCHING_TIME
              value: "1.000000"
            - name: ENABLE_INVADER_ENEMY
              value: "False"
            - name: PAL_STOMACH_DECREASE_RATE
              value: "-1.000000"
            - name: UPDATE_ON_BOOT
              value: "true"
            - name: BUILD_OBJECT_DETERIORATION_DAMAGE_RATE
              value: "1"
          image: thijsvanloef/palworld-server-docker
          imagePullPolicy: Always
          name: main
          ports:
            - containerPort: 8211
              protocol: UDP
            - containerPort: 27015
              protocol: UDP
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          volumeMounts:
            - mountPath: /palworld
              name: pvc-palworld-longhorn
      dnsPolicy: ClusterFirst
      hostNetwork: false
      restartPolicy: Always
      securityContext:
        fsGroupChangePolicy: Always
        runAsNonRoot: true
      setHostnameAsFQDN: false
      terminationGracePeriodSeconds: 30
      volumes:
        - name: pvc-palworld-longhorn
          persistentVolumeClaim:
            claimName: palworld-longhorn
            readOnly: false
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: palworld-longhorn
  namespace: turing
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: longhorn
  volumeMode: Filesystem
---
apiVersion: onepassword.com/v1
kind: OnePasswordItem
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-palworld-item
  namespace: turing
spec:
  itemPath: vaults/v64ocnykdqju4ui6j6pua56xw4/items/yrlyezq2axgfkdfchtl7n7o6b4
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-palworld-game-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - nodePort: 30000
      port: 8211
      protocol: UDP
  selector:
    cdk8s.io/metadata.addr: turing-palworld-c89e0183
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: turing
  name: turing-palworld-query-service
  namespace: turing
spec:
  externalIPs: []
  ports:
    - nodePort: 30001
      port: 27015
      protocol: UDP
  selector:
    cdk8s.io/metadata.addr: turing-palworld-c89e0183
  type: NodePort
